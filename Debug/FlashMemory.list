
FlashMemory.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ac4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08003c54  08003c54  00013c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e14  08003e14  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003e14  08003e14  00013e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e1c  08003e1c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e1c  08003e1c  00013e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e20  08003e20  00013e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000000ac  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000011c  2000011c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000091aa  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bf0  00000000  00000000  0002924a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000868  00000000  00000000  0002ae40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007b0  00000000  00000000  0002b6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f622  00000000  00000000  0002be58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a3a2  00000000  00000000  0004b47a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b9540  00000000  00000000  0005581c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010ed5c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000028d4  00000000  00000000  0010edac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003c3c 	.word	0x08003c3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003c3c 	.word	0x08003c3c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4a44      	ldr	r2, [pc, #272]	; (80006a4 <GetSector+0x120>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d806      	bhi.n	80005a6 <GetSector+0x22>
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800059e:	d302      	bcc.n	80005a6 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]
 80005a4:	e077      	b.n	8000696 <GetSector+0x112>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4a3f      	ldr	r2, [pc, #252]	; (80006a8 <GetSector+0x124>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d806      	bhi.n	80005bc <GetSector+0x38>
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4a3e      	ldr	r2, [pc, #248]	; (80006ac <GetSector+0x128>)
 80005b2:	4293      	cmp	r3, r2
 80005b4:	d302      	bcc.n	80005bc <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 80005b6:	2301      	movs	r3, #1
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	e06c      	b.n	8000696 <GetSector+0x112>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4a3c      	ldr	r2, [pc, #240]	; (80006b0 <GetSector+0x12c>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d806      	bhi.n	80005d2 <GetSector+0x4e>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4a3b      	ldr	r2, [pc, #236]	; (80006b4 <GetSector+0x130>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d302      	bcc.n	80005d2 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	e061      	b.n	8000696 <GetSector+0x112>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4a38      	ldr	r2, [pc, #224]	; (80006b8 <GetSector+0x134>)
 80005d6:	4293      	cmp	r3, r2
 80005d8:	d206      	bcs.n	80005e8 <GetSector+0x64>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4a37      	ldr	r2, [pc, #220]	; (80006bc <GetSector+0x138>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d302      	bcc.n	80005e8 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 80005e2:	2303      	movs	r3, #3
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	e056      	b.n	8000696 <GetSector+0x112>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4a35      	ldr	r2, [pc, #212]	; (80006c0 <GetSector+0x13c>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d206      	bcs.n	80005fe <GetSector+0x7a>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	4a31      	ldr	r2, [pc, #196]	; (80006b8 <GetSector+0x134>)
 80005f4:	4293      	cmp	r3, r2
 80005f6:	d902      	bls.n	80005fe <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 80005f8:	2304      	movs	r3, #4
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	e04b      	b.n	8000696 <GetSector+0x112>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4a30      	ldr	r2, [pc, #192]	; (80006c4 <GetSector+0x140>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d206      	bcs.n	8000614 <GetSector+0x90>
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	4a2d      	ldr	r2, [pc, #180]	; (80006c0 <GetSector+0x13c>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d902      	bls.n	8000614 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 800060e:	2305      	movs	r3, #5
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	e040      	b.n	8000696 <GetSector+0x112>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4a2c      	ldr	r2, [pc, #176]	; (80006c8 <GetSector+0x144>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d206      	bcs.n	800062a <GetSector+0xa6>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4a29      	ldr	r2, [pc, #164]	; (80006c4 <GetSector+0x140>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d902      	bls.n	800062a <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8000624:	2306      	movs	r3, #6
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	e035      	b.n	8000696 <GetSector+0x112>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a27      	ldr	r2, [pc, #156]	; (80006cc <GetSector+0x148>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d206      	bcs.n	8000640 <GetSector+0xbc>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a24      	ldr	r2, [pc, #144]	; (80006c8 <GetSector+0x144>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d902      	bls.n	8000640 <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;
 800063a:	2307      	movs	r3, #7
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	e02a      	b.n	8000696 <GetSector+0x112>
  }
  else if((Address < 0x0809FFFF) && (Address >= 0x08080000))
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4a23      	ldr	r2, [pc, #140]	; (80006d0 <GetSector+0x14c>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d206      	bcs.n	8000656 <GetSector+0xd2>
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4a20      	ldr	r2, [pc, #128]	; (80006cc <GetSector+0x148>)
 800064c:	4293      	cmp	r3, r2
 800064e:	d902      	bls.n	8000656 <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;
 8000650:	2308      	movs	r3, #8
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	e01f      	b.n	8000696 <GetSector+0x112>
  }
  else if((Address < 0x080BFFFF) && (Address >= 0x080A0000))
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	4a1e      	ldr	r2, [pc, #120]	; (80006d4 <GetSector+0x150>)
 800065a:	4293      	cmp	r3, r2
 800065c:	d206      	bcs.n	800066c <GetSector+0xe8>
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a1b      	ldr	r2, [pc, #108]	; (80006d0 <GetSector+0x14c>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d902      	bls.n	800066c <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;
 8000666:	2309      	movs	r3, #9
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	e014      	b.n	8000696 <GetSector+0x112>
  }
  else if((Address < 0x080DFFFF) && (Address >= 0x080C0000))
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a1a      	ldr	r2, [pc, #104]	; (80006d8 <GetSector+0x154>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d806      	bhi.n	8000682 <GetSector+0xfe>
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a17      	ldr	r2, [pc, #92]	; (80006d4 <GetSector+0x150>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d902      	bls.n	8000682 <GetSector+0xfe>
  {
    sector = FLASH_SECTOR_10;
 800067c:	230a      	movs	r3, #10
 800067e:	60fb      	str	r3, [r7, #12]
 8000680:	e009      	b.n	8000696 <GetSector+0x112>
  }
  else if((Address < 0x080FFFFF) && (Address >= 0x080E0000))
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4a15      	ldr	r2, [pc, #84]	; (80006dc <GetSector+0x158>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d805      	bhi.n	8000696 <GetSector+0x112>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	4a14      	ldr	r2, [pc, #80]	; (80006e0 <GetSector+0x15c>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d901      	bls.n	8000696 <GetSector+0x112>
  {
    sector = FLASH_SECTOR_11;
 8000692:	230b      	movs	r3, #11
 8000694:	60fb      	str	r3, [r7, #12]
//  }
//  else if ((Address < 0x081FFFFF) && (Address >= 0x081E0000))
//  {
//    sector = FLASH_SECTOR_23;
//  }
  return sector;
 8000696:	68fb      	ldr	r3, [r7, #12]
}
 8000698:	4618      	mov	r0, r3
 800069a:	3714      	adds	r7, #20
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	08003ffe 	.word	0x08003ffe
 80006a8:	08007ffe 	.word	0x08007ffe
 80006ac:	08004000 	.word	0x08004000
 80006b0:	0800bffe 	.word	0x0800bffe
 80006b4:	08008000 	.word	0x08008000
 80006b8:	0800ffff 	.word	0x0800ffff
 80006bc:	0800c000 	.word	0x0800c000
 80006c0:	0801ffff 	.word	0x0801ffff
 80006c4:	0803ffff 	.word	0x0803ffff
 80006c8:	0805ffff 	.word	0x0805ffff
 80006cc:	0807ffff 	.word	0x0807ffff
 80006d0:	0809ffff 	.word	0x0809ffff
 80006d4:	080bffff 	.word	0x080bffff
 80006d8:	080dfffe 	.word	0x080dfffe
 80006dc:	080ffffe 	.word	0x080ffffe
 80006e0:	080dffff 	.word	0x080dffff

080006e4 <Flash_Write_Data>:
   return float_variable;
}


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 80006e4:	b5b0      	push	{r4, r5, r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	4613      	mov	r3, r2
 80006f0:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 80006f6:	f000 fdcb 	bl	8001290 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 80006fa:	68f8      	ldr	r0, [r7, #12]
 80006fc:	f7ff ff42 	bl	8000584 <GetSector>
 8000700:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 8000702:	88fb      	ldrh	r3, [r7, #6]
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	461a      	mov	r2, r3
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	4413      	add	r3, r2
 800070c:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 800070e:	69f8      	ldr	r0, [r7, #28]
 8000710:	f7ff ff38 	bl	8000584 <GetSector>
 8000714:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8000716:	4b21      	ldr	r3, [pc, #132]	; (800079c <Flash_Write_Data+0xb8>)
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 800071c:	4b1f      	ldr	r3, [pc, #124]	; (800079c <Flash_Write_Data+0xb8>)
 800071e:	2202      	movs	r2, #2
 8000720:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 8000722:	4a1e      	ldr	r2, [pc, #120]	; (800079c <Flash_Write_Data+0xb8>)
 8000724:	6a3b      	ldr	r3, [r7, #32]
 8000726:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8000728:	69ba      	ldr	r2, [r7, #24]
 800072a:	6a3b      	ldr	r3, [r7, #32]
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	3301      	adds	r3, #1
 8000730:	4a1a      	ldr	r2, [pc, #104]	; (800079c <Flash_Write_Data+0xb8>)
 8000732:	60d3      	str	r3, [r2, #12]

	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */
	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4619      	mov	r1, r3
 800073a:	4818      	ldr	r0, [pc, #96]	; (800079c <Flash_Write_Data+0xb8>)
 800073c:	f000 ff16 	bl	800156c <HAL_FLASHEx_Erase>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d01f      	beq.n	8000786 <Flash_Write_Data+0xa2>
	  {
		  return HAL_FLASH_GetError ();
 8000746:	f000 fdd5 	bl	80012f4 <HAL_FLASH_GetError>
 800074a:	4603      	mov	r3, r0
 800074c:	e022      	b.n	8000794 <Flash_Write_Data+0xb0>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 800074e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	68ba      	ldr	r2, [r7, #8]
 8000754:	4413      	add	r3, r2
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2200      	movs	r2, #0
 800075a:	461c      	mov	r4, r3
 800075c:	4615      	mov	r5, r2
 800075e:	4622      	mov	r2, r4
 8000760:	462b      	mov	r3, r5
 8000762:	68f9      	ldr	r1, [r7, #12]
 8000764:	2002      	movs	r0, #2
 8000766:	f000 fd3f 	bl	80011e8 <HAL_FLASH_Program>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d106      	bne.n	800077e <Flash_Write_Data+0x9a>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	3304      	adds	r3, #4
 8000774:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8000776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000778:	3301      	adds	r3, #1
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
 800077c:	e003      	b.n	8000786 <Flash_Write_Data+0xa2>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 800077e:	f000 fdb9 	bl	80012f4 <HAL_FLASH_GetError>
 8000782:	4603      	mov	r3, r0
 8000784:	e006      	b.n	8000794 <Flash_Write_Data+0xb0>
	   while (sofar<numberofwords)
 8000786:	88fb      	ldrh	r3, [r7, #6]
 8000788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800078a:	429a      	cmp	r2, r3
 800078c:	dbdf      	blt.n	800074e <Flash_Write_Data+0x6a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 800078e:	f000 fda1 	bl	80012d4 <HAL_FLASH_Lock>

	   return 0;
 8000792:	2300      	movs	r3, #0
}
 8000794:	4618      	mov	r0, r3
 8000796:	3728      	adds	r7, #40	; 0x28
 8000798:	46bd      	mov	sp, r7
 800079a:	bdb0      	pop	{r4, r5, r7, pc}
 800079c:	2000008c 	.word	0x2000008c

080007a0 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	4613      	mov	r3, r2
 80007ac:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	3304      	adds	r3, #4
 80007ba:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	3304      	adds	r3, #4
 80007c0:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 80007c2:	88fb      	ldrh	r3, [r7, #6]
 80007c4:	1e5a      	subs	r2, r3, #1
 80007c6:	80fa      	strh	r2, [r7, #6]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d000      	beq.n	80007ce <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 80007cc:	e7ef      	b.n	80007ae <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 80007ce:	bf00      	nop
	}
}
 80007d0:	bf00      	nop
 80007d2:	3714      	adds	r7, #20
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <Convert_To_Str>:

void Convert_To_Str (uint32_t *Data, char *Buf)
{
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
	int numberofbytes = ((strlen((char *)Data)/4) + ((strlen((char *)Data) % 4) != 0)) *4;
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff fcf2 	bl	80001d0 <strlen>
 80007ec:	4603      	mov	r3, r0
 80007ee:	089c      	lsrs	r4, r3, #2
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff fced 	bl	80001d0 <strlen>
 80007f6:	4603      	mov	r3, r0
 80007f8:	f003 0303 	and.w	r3, r3, #3
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	bf14      	ite	ne
 8000800:	2301      	movne	r3, #1
 8000802:	2300      	moveq	r3, #0
 8000804:	b2db      	uxtb	r3, r3
 8000806:	4423      	add	r3, r4
 8000808:	009b      	lsls	r3, r3, #2
 800080a:	60bb      	str	r3, [r7, #8]

	for (int i=0; i<numberofbytes; i++)
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	e01b      	b.n	800084a <Convert_To_Str+0x6e>
	{
		Buf[i] = Data[i/4]>>(8*(i%4));
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	2b00      	cmp	r3, #0
 8000816:	da00      	bge.n	800081a <Convert_To_Str+0x3e>
 8000818:	3303      	adds	r3, #3
 800081a:	109b      	asrs	r3, r3, #2
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	4259      	negs	r1, r3
 8000828:	f003 0303 	and.w	r3, r3, #3
 800082c:	f001 0103 	and.w	r1, r1, #3
 8000830:	bf58      	it	pl
 8000832:	424b      	negpl	r3, r1
 8000834:	00db      	lsls	r3, r3, #3
 8000836:	fa22 f103 	lsr.w	r1, r2, r3
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	683a      	ldr	r2, [r7, #0]
 800083e:	4413      	add	r3, r2
 8000840:	b2ca      	uxtb	r2, r1
 8000842:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<numberofbytes; i++)
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	3301      	adds	r3, #1
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fa      	ldr	r2, [r7, #12]
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	429a      	cmp	r2, r3
 8000850:	dbdf      	blt.n	8000812 <Convert_To_Str+0x36>
	}
}
 8000852:	bf00      	nop
 8000854:	bf00      	nop
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	bd90      	pop	{r4, r7, pc}

0800085c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b0bd      	sub	sp, #244	; 0xf4
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000862:	f000 fb45 	bl	8000ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000866:	f000 f8cd 	bl	8000a04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800086a:	f000 f95f 	bl	8000b2c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800086e:	f000 f933 	bl	8000ad8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  char *data = "Hello, We are access Flash Memory in the course CE437";
 8000872:	4b5b      	ldr	r3, [pc, #364]	; (80009e0 <main+0x184>)
 8000874:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  int numofwords = (strlen(data)/4) + ((strlen(data)%4)!=0);
 8000878:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800087c:	f7ff fca8 	bl	80001d0 <strlen>
 8000880:	4603      	mov	r3, r0
 8000882:	089c      	lsrs	r4, r3, #2
 8000884:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8000888:	f7ff fca2 	bl	80001d0 <strlen>
 800088c:	4603      	mov	r3, r0
 800088e:	f003 0303 	and.w	r3, r3, #3
 8000892:	2b00      	cmp	r3, #0
 8000894:	bf14      	ite	ne
 8000896:	2301      	movne	r3, #1
 8000898:	2300      	moveq	r3, #0
 800089a:	b2db      	uxtb	r3, r3
 800089c:	4423      	add	r3, r4
 800089e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // current address (FLASH_SECTOR_11) to write
	  CURRENT_ADDR = START_ADDR;
 80008a2:	4b50      	ldr	r3, [pc, #320]	; (80009e4 <main+0x188>)
 80008a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

	  printf("Begin to write into the flash memory\r\n");
 80008a8:	484f      	ldr	r0, [pc, #316]	; (80009e8 <main+0x18c>)
 80008aa:	f002 fa49 	bl	8002d40 <puts>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	2101      	movs	r1, #1
 80008b2:	484e      	ldr	r0, [pc, #312]	; (80009ec <main+0x190>)
 80008b4:	f001 f918 	bl	8001ae8 <HAL_GPIO_WritePin>
	  // write 100 times
	  for(int count=0;count<2; count++)
 80008b8:	2300      	movs	r3, #0
 80008ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80008be:	e02d      	b.n	800091c <main+0xc0>
	  {
		  printf("Write at address %08lx in line of %d\r\n", CURRENT_ADDR, count+1);
 80008c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80008c4:	3301      	adds	r3, #1
 80008c6:	461a      	mov	r2, r3
 80008c8:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80008cc:	4848      	ldr	r0, [pc, #288]	; (80009f0 <main+0x194>)
 80008ce:	f002 f9b1 	bl	8002c34 <iprintf>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	2102      	movs	r1, #2
 80008d6:	4845      	ldr	r0, [pc, #276]	; (80009ec <main+0x190>)
 80008d8:	f001 f906 	bl	8001ae8 <HAL_GPIO_WritePin>

		  Flash_Write_Data(CURRENT_ADDR, (uint32_t *)data, numofwords);
 80008dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	461a      	mov	r2, r3
 80008e4:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 80008e8:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 80008ec:	f7ff fefa 	bl	80006e4 <Flash_Write_Data>
		  CURRENT_ADDR = CURRENT_ADDR + (numofwords*4);
 80008f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	461a      	mov	r2, r3
 80008f8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80008fc:	4413      	add	r3, r2
 80008fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2102      	movs	r1, #2
 8000906:	4839      	ldr	r0, [pc, #228]	; (80009ec <main+0x190>)
 8000908:	f001 f8ee 	bl	8001ae8 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 800090c:	2064      	movs	r0, #100	; 0x64
 800090e:	f000 fb61 	bl	8000fd4 <HAL_Delay>
	  for(int count=0;count<2; count++)
 8000912:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000916:	3301      	adds	r3, #1
 8000918:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800091c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8000920:	2b01      	cmp	r3, #1
 8000922:	ddcd      	ble.n	80008c0 <main+0x64>
	  }
	  printf("Finish writing!\r\n");
 8000924:	4833      	ldr	r0, [pc, #204]	; (80009f4 <main+0x198>)
 8000926:	f002 fa0b 	bl	8002d40 <puts>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2101      	movs	r1, #1
 800092e:	482f      	ldr	r0, [pc, #188]	; (80009ec <main+0x190>)
 8000930:	f001 f8da 	bl	8001ae8 <HAL_GPIO_WritePin>

	  CURRENT_ADDR = START_ADDR;
 8000934:	4b2b      	ldr	r3, [pc, #172]	; (80009e4 <main+0x188>)
 8000936:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

	  printf("Begin to read from the flash memory and show on console\r\n");
 800093a:	482f      	ldr	r0, [pc, #188]	; (80009f8 <main+0x19c>)
 800093c:	f002 fa00 	bl	8002d40 <puts>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000940:	2201      	movs	r2, #1
 8000942:	2108      	movs	r1, #8
 8000944:	4829      	ldr	r0, [pc, #164]	; (80009ec <main+0x190>)
 8000946:	f001 f8cf 	bl	8001ae8 <HAL_GPIO_WritePin>
	  // read data and check
	  for(int count=0;count<2; count++)
 800094a:	2300      	movs	r3, #0
 800094c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8000950:	e034      	b.n	80009bc <main+0x160>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000952:	2201      	movs	r2, #1
 8000954:	2104      	movs	r1, #4
 8000956:	4825      	ldr	r0, [pc, #148]	; (80009ec <main+0x190>)
 8000958:	f001 f8c6 	bl	8001ae8 <HAL_GPIO_WritePin>

		  Flash_Read_Data(CURRENT_ADDR, Rx_Data, numofwords);
 800095c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000960:	b29a      	uxth	r2, r3
 8000962:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000966:	4619      	mov	r1, r3
 8000968:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800096c:	f7ff ff18 	bl	80007a0 <Flash_Read_Data>
		  Convert_To_Str(Rx_Data, string);
 8000970:	463a      	mov	r2, r7
 8000972:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000976:	4611      	mov	r1, r2
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ff2f 	bl	80007dc <Convert_To_Str>

		  printf("--> [%d] Read data at %08lx: %s\r\n", count+1, CURRENT_ADDR, string);
 800097e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8000982:	1c59      	adds	r1, r3, #1
 8000984:	463b      	mov	r3, r7
 8000986:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800098a:	481c      	ldr	r0, [pc, #112]	; (80009fc <main+0x1a0>)
 800098c:	f002 f952 	bl	8002c34 <iprintf>
		  CURRENT_ADDR = CURRENT_ADDR + (numofwords*4);
 8000990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	461a      	mov	r2, r3
 8000998:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800099c:	4413      	add	r3, r2
 800099e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2104      	movs	r1, #4
 80009a6:	4811      	ldr	r0, [pc, #68]	; (80009ec <main+0x190>)
 80009a8:	f001 f89e 	bl	8001ae8 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 80009ac:	2064      	movs	r0, #100	; 0x64
 80009ae:	f000 fb11 	bl	8000fd4 <HAL_Delay>
	  for(int count=0;count<2; count++)
 80009b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80009b6:	3301      	adds	r3, #1
 80009b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80009bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	ddc6      	ble.n	8000952 <main+0xf6>
	  }
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2108      	movs	r1, #8
 80009c8:	4808      	ldr	r0, [pc, #32]	; (80009ec <main+0x190>)
 80009ca:	f001 f88d 	bl	8001ae8 <HAL_GPIO_WritePin>

	  printf("Finish reading!\r\n");
 80009ce:	480c      	ldr	r0, [pc, #48]	; (8000a00 <main+0x1a4>)
 80009d0:	f002 f9b6 	bl	8002d40 <puts>
	  HAL_Delay(1000);
 80009d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009d8:	f000 fafc 	bl	8000fd4 <HAL_Delay>
	  CURRENT_ADDR = START_ADDR;
 80009dc:	e761      	b.n	80008a2 <main+0x46>
 80009de:	bf00      	nop
 80009e0:	08003c54 	.word	0x08003c54
 80009e4:	080e0000 	.word	0x080e0000
 80009e8:	08003c8c 	.word	0x08003c8c
 80009ec:	40020400 	.word	0x40020400
 80009f0:	08003cb4 	.word	0x08003cb4
 80009f4:	08003cdc 	.word	0x08003cdc
 80009f8:	08003cf0 	.word	0x08003cf0
 80009fc:	08003d2c 	.word	0x08003d2c
 8000a00:	08003d50 	.word	0x08003d50

08000a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b094      	sub	sp, #80	; 0x50
 8000a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0a:	f107 0320 	add.w	r3, r7, #32
 8000a0e:	2230      	movs	r2, #48	; 0x30
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f002 f906 	bl	8002c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	4b28      	ldr	r3, [pc, #160]	; (8000ad0 <SystemClock_Config+0xcc>)
 8000a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a30:	4a27      	ldr	r2, [pc, #156]	; (8000ad0 <SystemClock_Config+0xcc>)
 8000a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a36:	6413      	str	r3, [r2, #64]	; 0x40
 8000a38:	4b25      	ldr	r3, [pc, #148]	; (8000ad0 <SystemClock_Config+0xcc>)
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a44:	2300      	movs	r3, #0
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	4b22      	ldr	r3, [pc, #136]	; (8000ad4 <SystemClock_Config+0xd0>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a21      	ldr	r2, [pc, #132]	; (8000ad4 <SystemClock_Config+0xd0>)
 8000a4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a52:	6013      	str	r3, [r2, #0]
 8000a54:	4b1f      	ldr	r3, [pc, #124]	; (8000ad4 <SystemClock_Config+0xd0>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a60:	2301      	movs	r3, #1
 8000a62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a74:	2304      	movs	r3, #4
 8000a76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a78:	23a8      	movs	r3, #168	; 0xa8
 8000a7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a80:	2304      	movs	r3, #4
 8000a82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a84:	f107 0320 	add.w	r3, r7, #32
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f001 f847 	bl	8001b1c <HAL_RCC_OscConfig>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a94:	f000 f8ac 	bl	8000bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a98:	230f      	movs	r3, #15
 8000a9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aa4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000aa8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	2105      	movs	r1, #5
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 faa8 	bl	800200c <HAL_RCC_ClockConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ac2:	f000 f895 	bl	8000bf0 <Error_Handler>
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	3750      	adds	r7, #80	; 0x50
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40007000 	.word	0x40007000

08000ad8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	; (8000b28 <MX_USART1_UART_Init+0x50>)
 8000ae0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000ae4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000afe:	220c      	movs	r2, #12
 8000b00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b02:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <MX_USART1_UART_Init+0x4c>)
 8000b10:	f001 fc9c 	bl	800244c <HAL_UART_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b1a:	f000 f869 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200000a0 	.word	0x200000a0
 8000b28:	40011000 	.word	0x40011000

08000b2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b088      	sub	sp, #32
 8000b30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b32:	f107 030c 	add.w	r3, r7, #12
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
 8000b40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	4b1f      	ldr	r3, [pc, #124]	; (8000bc4 <MX_GPIO_Init+0x98>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	4a1e      	ldr	r2, [pc, #120]	; (8000bc4 <MX_GPIO_Init+0x98>)
 8000b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b50:	6313      	str	r3, [r2, #48]	; 0x30
 8000b52:	4b1c      	ldr	r3, [pc, #112]	; (8000bc4 <MX_GPIO_Init+0x98>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <MX_GPIO_Init+0x98>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a17      	ldr	r2, [pc, #92]	; (8000bc4 <MX_GPIO_Init+0x98>)
 8000b68:	f043 0302 	orr.w	r3, r3, #2
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <MX_GPIO_Init+0x98>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0302 	and.w	r3, r3, #2
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_GPIO_Init+0x98>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a10      	ldr	r2, [pc, #64]	; (8000bc4 <MX_GPIO_Init+0x98>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_GPIO_Init+0x98>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	210f      	movs	r1, #15
 8000b9a:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <MX_GPIO_Init+0x9c>)
 8000b9c:	f000 ffa4 	bl	8001ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000ba0:	230f      	movs	r3, #15
 8000ba2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <MX_GPIO_Init+0x9c>)
 8000bb8:	f000 fdfa 	bl	80017b0 <HAL_GPIO_Init>

}
 8000bbc:	bf00      	nop
 8000bbe:	3720      	adds	r7, #32
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020400 	.word	0x40020400

08000bcc <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART */
  HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 100);
 8000bd4:	1d39      	adds	r1, r7, #4
 8000bd6:	2364      	movs	r3, #100	; 0x64
 8000bd8:	2201      	movs	r2, #1
 8000bda:	4804      	ldr	r0, [pc, #16]	; (8000bec <__io_putchar+0x20>)
 8000bdc:	f001 fc83 	bl	80024e6 <HAL_UART_Transmit>
  return ch;
 8000be0:	687b      	ldr	r3, [r7, #4]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200000a0 	.word	0x200000a0

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <Error_Handler+0x8>
	...

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	4a0f      	ldr	r2, [pc, #60]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c10:	6453      	str	r3, [r2, #68]	; 0x44
 8000c12:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c26:	4a08      	ldr	r2, [pc, #32]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_MspInit+0x4c>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40023800 	.word	0x40023800

08000c4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a19      	ldr	r2, [pc, #100]	; (8000cd0 <HAL_UART_MspInit+0x84>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d12c      	bne.n	8000cc8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <HAL_UART_MspInit+0x88>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <HAL_UART_MspInit+0x88>)
 8000c78:	f043 0310 	orr.w	r3, r3, #16
 8000c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <HAL_UART_MspInit+0x88>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	f003 0310 	and.w	r3, r3, #16
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	4b11      	ldr	r3, [pc, #68]	; (8000cd4 <HAL_UART_MspInit+0x88>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a10      	ldr	r2, [pc, #64]	; (8000cd4 <HAL_UART_MspInit+0x88>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_UART_MspInit+0x88>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ca6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cb8:	2307      	movs	r3, #7
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <HAL_UART_MspInit+0x8c>)
 8000cc4:	f000 fd74 	bl	80017b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cc8:	bf00      	nop
 8000cca:	3728      	adds	r7, #40	; 0x28
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40011000 	.word	0x40011000
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020000 	.word	0x40020000

08000cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <NMI_Handler+0x4>

08000ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <HardFault_Handler+0x4>

08000ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <MemManage_Handler+0x4>

08000cee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr

08000d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr

08000d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d28:	f000 f934 	bl	8000f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
 8000d40:	e00a      	b.n	8000d58 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d42:	f3af 8000 	nop.w
 8000d46:	4601      	mov	r1, r0
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	1c5a      	adds	r2, r3, #1
 8000d4c:	60ba      	str	r2, [r7, #8]
 8000d4e:	b2ca      	uxtb	r2, r1
 8000d50:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	3301      	adds	r3, #1
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	697a      	ldr	r2, [r7, #20]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	dbf0      	blt.n	8000d42 <_read+0x12>
	}

return len;
 8000d60:	687b      	ldr	r3, [r7, #4]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	60f8      	str	r0, [r7, #12]
 8000d72:	60b9      	str	r1, [r7, #8]
 8000d74:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	e009      	b.n	8000d90 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	1c5a      	adds	r2, r3, #1
 8000d80:	60ba      	str	r2, [r7, #8]
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff21 	bl	8000bcc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	697a      	ldr	r2, [r7, #20]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	dbf1      	blt.n	8000d7c <_write+0x12>
	}
	return len;
 8000d98:	687b      	ldr	r3, [r7, #4]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <_close>:

int _close(int file)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
	return -1;
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dca:	605a      	str	r2, [r3, #4]
	return 0;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	370c      	adds	r7, #12
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <_isatty>:

int _isatty(int file)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
	return 1;
 8000de2:	2301      	movs	r3, #1
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
	return 0;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e14:	4a14      	ldr	r2, [pc, #80]	; (8000e68 <_sbrk+0x5c>)
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <_sbrk+0x60>)
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d102      	bne.n	8000e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <_sbrk+0x64>)
 8000e2a:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <_sbrk+0x68>)
 8000e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d207      	bcs.n	8000e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e3c:	f001 fec8 	bl	8002bd0 <__errno>
 8000e40:	4603      	mov	r3, r0
 8000e42:	220c      	movs	r2, #12
 8000e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4a:	e009      	b.n	8000e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <_sbrk+0x64>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4413      	add	r3, r2
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <_sbrk+0x64>)
 8000e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20020000 	.word	0x20020000
 8000e6c:	00000400 	.word	0x00000400
 8000e70:	200000e4 	.word	0x200000e4
 8000e74:	20000120 	.word	0x20000120

08000e78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <SystemInit+0x20>)
 8000e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e82:	4a05      	ldr	r2, [pc, #20]	; (8000e98 <SystemInit+0x20>)
 8000e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea0:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ea2:	490e      	ldr	r1, [pc, #56]	; (8000edc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ea4:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea8:	e002      	b.n	8000eb0 <LoopCopyDataInit>

08000eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eae:	3304      	adds	r3, #4

08000eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb4:	d3f9      	bcc.n	8000eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eb8:	4c0b      	ldr	r4, [pc, #44]	; (8000ee8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ebc:	e001      	b.n	8000ec2 <LoopFillZerobss>

08000ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec0:	3204      	adds	r2, #4

08000ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec4:	d3fb      	bcc.n	8000ebe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ec6:	f7ff ffd7 	bl	8000e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eca:	f001 fe87 	bl	8002bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ece:	f7ff fcc5 	bl	800085c <main>
  bx  lr    
 8000ed2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ed4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000edc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ee0:	08003e24 	.word	0x08003e24
  ldr r2, =_sbss
 8000ee4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ee8:	2000011c 	.word	0x2000011c

08000eec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eec:	e7fe      	b.n	8000eec <ADC_IRQHandler>
	...

08000ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <HAL_Init+0x40>)
 8000efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f00:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <HAL_Init+0x40>)
 8000f06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <HAL_Init+0x40>)
 8000f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f18:	2003      	movs	r0, #3
 8000f1a:	f000 f931 	bl	8001180 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1e:	200f      	movs	r0, #15
 8000f20:	f000 f808 	bl	8000f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f24:	f7ff fe6a 	bl	8000bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023c00 	.word	0x40023c00

08000f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_InitTick+0x54>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_InitTick+0x58>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f93b 	bl	80011ce <HAL_SYSTICK_Config>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00e      	b.n	8000f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b0f      	cmp	r3, #15
 8000f66:	d80a      	bhi.n	8000f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f000 f911 	bl	8001196 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f74:	4a06      	ldr	r2, [pc, #24]	; (8000f90 <HAL_InitTick+0x5c>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e000      	b.n	8000f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000000 	.word	0x20000000
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	20000004 	.word	0x20000004

08000f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x20>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	200000e8 	.word	0x200000e8

08000fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <HAL_GetTick+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	200000e8 	.word	0x200000e8

08000fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fdc:	f7ff ffee 	bl	8000fbc <HAL_GetTick>
 8000fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fec:	d005      	beq.n	8000ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_Delay+0x44>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ffa:	bf00      	nop
 8000ffc:	f7ff ffde 	bl	8000fbc <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	429a      	cmp	r2, r3
 800100a:	d8f7      	bhi.n	8000ffc <HAL_Delay+0x28>
  {
  }
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000008 	.word	0x20000008

0800101c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001038:	4013      	ands	r3, r2
 800103a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104e:	4a04      	ldr	r2, [pc, #16]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	60d3      	str	r3, [r2, #12]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <__NVIC_GetPriorityGrouping+0x18>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	f003 0307 	and.w	r3, r3, #7
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	2b00      	cmp	r3, #0
 8001092:	db0a      	blt.n	80010aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	b2da      	uxtb	r2, r3
 8001098:	490c      	ldr	r1, [pc, #48]	; (80010cc <__NVIC_SetPriority+0x4c>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	0112      	lsls	r2, r2, #4
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	440b      	add	r3, r1
 80010a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a8:	e00a      	b.n	80010c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4908      	ldr	r1, [pc, #32]	; (80010d0 <__NVIC_SetPriority+0x50>)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	3b04      	subs	r3, #4
 80010b8:	0112      	lsls	r2, r2, #4
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	440b      	add	r3, r1
 80010be:	761a      	strb	r2, [r3, #24]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000e100 	.word	0xe000e100
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	; 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f1c3 0307 	rsb	r3, r3, #7
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	bf28      	it	cs
 80010f2:	2304      	movcs	r3, #4
 80010f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3304      	adds	r3, #4
 80010fa:	2b06      	cmp	r3, #6
 80010fc:	d902      	bls.n	8001104 <NVIC_EncodePriority+0x30>
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3b03      	subs	r3, #3
 8001102:	e000      	b.n	8001106 <NVIC_EncodePriority+0x32>
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	f04f 32ff 	mov.w	r2, #4294967295
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43da      	mvns	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	401a      	ands	r2, r3
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800111c:	f04f 31ff 	mov.w	r1, #4294967295
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	43d9      	mvns	r1, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112c:	4313      	orrs	r3, r2
         );
}
 800112e:	4618      	mov	r0, r3
 8001130:	3724      	adds	r7, #36	; 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800114c:	d301      	bcc.n	8001152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114e:	2301      	movs	r3, #1
 8001150:	e00f      	b.n	8001172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001152:	4a0a      	ldr	r2, [pc, #40]	; (800117c <SysTick_Config+0x40>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115a:	210f      	movs	r1, #15
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f7ff ff8e 	bl	8001080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <SysTick_Config+0x40>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <SysTick_Config+0x40>)
 800116c:	2207      	movs	r2, #7
 800116e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	e000e010 	.word	0xe000e010

08001180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff47 	bl	800101c <__NVIC_SetPriorityGrouping>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001196:	b580      	push	{r7, lr}
 8001198:	b086      	sub	sp, #24
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a8:	f7ff ff5c 	bl	8001064 <__NVIC_GetPriorityGrouping>
 80011ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	68b9      	ldr	r1, [r7, #8]
 80011b2:	6978      	ldr	r0, [r7, #20]
 80011b4:	f7ff ff8e 	bl	80010d4 <NVIC_EncodePriority>
 80011b8:	4602      	mov	r2, r0
 80011ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011be:	4611      	mov	r1, r2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff5d 	bl	8001080 <__NVIC_SetPriority>
}
 80011c6:	bf00      	nop
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ffb0 	bl	800113c <SysTick_Config>
 80011dc:	4603      	mov	r3, r0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80011fa:	4b23      	ldr	r3, [pc, #140]	; (8001288 <HAL_FLASH_Program+0xa0>)
 80011fc:	7e1b      	ldrb	r3, [r3, #24]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d101      	bne.n	8001206 <HAL_FLASH_Program+0x1e>
 8001202:	2302      	movs	r3, #2
 8001204:	e03b      	b.n	800127e <HAL_FLASH_Program+0x96>
 8001206:	4b20      	ldr	r3, [pc, #128]	; (8001288 <HAL_FLASH_Program+0xa0>)
 8001208:	2201      	movs	r2, #1
 800120a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800120c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001210:	f000 f87c 	bl	800130c <FLASH_WaitForLastOperation>
 8001214:	4603      	mov	r3, r0
 8001216:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001218:	7dfb      	ldrb	r3, [r7, #23]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d12b      	bne.n	8001276 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d105      	bne.n	8001230 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001224:	783b      	ldrb	r3, [r7, #0]
 8001226:	4619      	mov	r1, r3
 8001228:	68b8      	ldr	r0, [r7, #8]
 800122a:	f000 f927 	bl	800147c <FLASH_Program_Byte>
 800122e:	e016      	b.n	800125e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d105      	bne.n	8001242 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001236:	883b      	ldrh	r3, [r7, #0]
 8001238:	4619      	mov	r1, r3
 800123a:	68b8      	ldr	r0, [r7, #8]
 800123c:	f000 f8fa 	bl	8001434 <FLASH_Program_HalfWord>
 8001240:	e00d      	b.n	800125e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2b02      	cmp	r3, #2
 8001246:	d105      	bne.n	8001254 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	4619      	mov	r1, r3
 800124c:	68b8      	ldr	r0, [r7, #8]
 800124e:	f000 f8cf 	bl	80013f0 <FLASH_Program_Word>
 8001252:	e004      	b.n	800125e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001254:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001258:	68b8      	ldr	r0, [r7, #8]
 800125a:	f000 f897 	bl	800138c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800125e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001262:	f000 f853 	bl	800130c <FLASH_WaitForLastOperation>
 8001266:	4603      	mov	r3, r0
 8001268:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <HAL_FLASH_Program+0xa4>)
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	4a07      	ldr	r2, [pc, #28]	; (800128c <HAL_FLASH_Program+0xa4>)
 8001270:	f023 0301 	bic.w	r3, r3, #1
 8001274:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001276:	4b04      	ldr	r3, [pc, #16]	; (8001288 <HAL_FLASH_Program+0xa0>)
 8001278:	2200      	movs	r2, #0
 800127a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800127c:	7dfb      	ldrb	r3, [r7, #23]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200000ec 	.word	0x200000ec
 800128c:	40023c00 	.word	0x40023c00

08001290 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <HAL_FLASH_Unlock+0x38>)
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	da0b      	bge.n	80012ba <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <HAL_FLASH_Unlock+0x38>)
 80012a4:	4a09      	ldr	r2, [pc, #36]	; (80012cc <HAL_FLASH_Unlock+0x3c>)
 80012a6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80012a8:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <HAL_FLASH_Unlock+0x38>)
 80012aa:	4a09      	ldr	r2, [pc, #36]	; (80012d0 <HAL_FLASH_Unlock+0x40>)
 80012ac:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <HAL_FLASH_Unlock+0x38>)
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	da01      	bge.n	80012ba <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80012ba:	79fb      	ldrb	r3, [r7, #7]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	40023c00 	.word	0x40023c00
 80012cc:	45670123 	.word	0x45670123
 80012d0:	cdef89ab 	.word	0xcdef89ab

080012d4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <HAL_FLASH_Lock+0x1c>)
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <HAL_FLASH_Lock+0x1c>)
 80012de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80012e2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	40023c00 	.word	0x40023c00

080012f4 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <HAL_FLASH_GetError+0x14>)
 80012fa:	69db      	ldr	r3, [r3, #28]
}  
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	200000ec 	.word	0x200000ec

0800130c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001318:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <FLASH_WaitForLastOperation+0x78>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800131e:	f7ff fe4d 	bl	8000fbc <HAL_GetTick>
 8001322:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001324:	e010      	b.n	8001348 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800132c:	d00c      	beq.n	8001348 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d007      	beq.n	8001344 <FLASH_WaitForLastOperation+0x38>
 8001334:	f7ff fe42 	bl	8000fbc <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	429a      	cmp	r2, r3
 8001342:	d201      	bcs.n	8001348 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e019      	b.n	800137c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <FLASH_WaitForLastOperation+0x7c>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1e8      	bne.n	8001326 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <FLASH_WaitForLastOperation+0x7c>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b00      	cmp	r3, #0
 800135e:	d002      	beq.n	8001366 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001360:	4b09      	ldr	r3, [pc, #36]	; (8001388 <FLASH_WaitForLastOperation+0x7c>)
 8001362:	2201      	movs	r2, #1
 8001364:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001366:	4b08      	ldr	r3, [pc, #32]	; (8001388 <FLASH_WaitForLastOperation+0x7c>)
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001372:	f000 f8a5 	bl	80014c0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
  
}  
 800137c:	4618      	mov	r0, r3
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200000ec 	.word	0x200000ec
 8001388:	40023c00 	.word	0x40023c00

0800138c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <FLASH_Program_DoubleWord+0x60>)
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	4a13      	ldr	r2, [pc, #76]	; (80013ec <FLASH_Program_DoubleWord+0x60>)
 800139e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <FLASH_Program_DoubleWord+0x60>)
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	4a10      	ldr	r2, [pc, #64]	; (80013ec <FLASH_Program_DoubleWord+0x60>)
 80013aa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80013ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <FLASH_Program_DoubleWord+0x60>)
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	4a0d      	ldr	r2, [pc, #52]	; (80013ec <FLASH_Program_DoubleWord+0x60>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	683a      	ldr	r2, [r7, #0]
 80013c0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80013c2:	f3bf 8f6f 	isb	sy
}
 80013c6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80013c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	f04f 0300 	mov.w	r3, #0
 80013d4:	000a      	movs	r2, r1
 80013d6:	2300      	movs	r3, #0
 80013d8:	68f9      	ldr	r1, [r7, #12]
 80013da:	3104      	adds	r1, #4
 80013dc:	4613      	mov	r3, r2
 80013de:	600b      	str	r3, [r1, #0]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	40023c00 	.word	0x40023c00

080013f0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80013fa:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <FLASH_Program_Word+0x40>)
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	4a0c      	ldr	r2, [pc, #48]	; (8001430 <FLASH_Program_Word+0x40>)
 8001400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001404:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <FLASH_Program_Word+0x40>)
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	4a09      	ldr	r2, [pc, #36]	; (8001430 <FLASH_Program_Word+0x40>)
 800140c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001410:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001412:	4b07      	ldr	r3, [pc, #28]	; (8001430 <FLASH_Program_Word+0x40>)
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	4a06      	ldr	r2, [pc, #24]	; (8001430 <FLASH_Program_Word+0x40>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	601a      	str	r2, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	40023c00 	.word	0x40023c00

08001434 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001440:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <FLASH_Program_HalfWord+0x44>)
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	4a0c      	ldr	r2, [pc, #48]	; (8001478 <FLASH_Program_HalfWord+0x44>)
 8001446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800144a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800144c:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <FLASH_Program_HalfWord+0x44>)
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	4a09      	ldr	r2, [pc, #36]	; (8001478 <FLASH_Program_HalfWord+0x44>)
 8001452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001456:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001458:	4b07      	ldr	r3, [pc, #28]	; (8001478 <FLASH_Program_HalfWord+0x44>)
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	4a06      	ldr	r2, [pc, #24]	; (8001478 <FLASH_Program_HalfWord+0x44>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	887a      	ldrh	r2, [r7, #2]
 8001468:	801a      	strh	r2, [r3, #0]
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40023c00 	.word	0x40023c00

0800147c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <FLASH_Program_Byte+0x40>)
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <FLASH_Program_Byte+0x40>)
 800148e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001492:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <FLASH_Program_Byte+0x40>)
 8001496:	4a09      	ldr	r2, [pc, #36]	; (80014bc <FLASH_Program_Byte+0x40>)
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <FLASH_Program_Byte+0x40>)
 800149e:	691b      	ldr	r3, [r3, #16]
 80014a0:	4a06      	ldr	r2, [pc, #24]	; (80014bc <FLASH_Program_Byte+0x40>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	78fa      	ldrb	r2, [r7, #3]
 80014ac:	701a      	strb	r2, [r3, #0]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40023c00 	.word	0x40023c00

080014c0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80014c4:	4b27      	ldr	r3, [pc, #156]	; (8001564 <FLASH_SetErrorCode+0xa4>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	f003 0310 	and.w	r3, r3, #16
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d008      	beq.n	80014e2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80014d0:	4b25      	ldr	r3, [pc, #148]	; (8001568 <FLASH_SetErrorCode+0xa8>)
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	f043 0310 	orr.w	r3, r3, #16
 80014d8:	4a23      	ldr	r2, [pc, #140]	; (8001568 <FLASH_SetErrorCode+0xa8>)
 80014da:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80014dc:	4b21      	ldr	r3, [pc, #132]	; (8001564 <FLASH_SetErrorCode+0xa4>)
 80014de:	2210      	movs	r2, #16
 80014e0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80014e2:	4b20      	ldr	r3, [pc, #128]	; (8001564 <FLASH_SetErrorCode+0xa4>)
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	f003 0320 	and.w	r3, r3, #32
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d008      	beq.n	8001500 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80014ee:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <FLASH_SetErrorCode+0xa8>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	f043 0308 	orr.w	r3, r3, #8
 80014f6:	4a1c      	ldr	r2, [pc, #112]	; (8001568 <FLASH_SetErrorCode+0xa8>)
 80014f8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80014fa:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <FLASH_SetErrorCode+0xa4>)
 80014fc:	2220      	movs	r2, #32
 80014fe:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001500:	4b18      	ldr	r3, [pc, #96]	; (8001564 <FLASH_SetErrorCode+0xa4>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001508:	2b00      	cmp	r3, #0
 800150a:	d008      	beq.n	800151e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <FLASH_SetErrorCode+0xa8>)
 800150e:	69db      	ldr	r3, [r3, #28]
 8001510:	f043 0304 	orr.w	r3, r3, #4
 8001514:	4a14      	ldr	r2, [pc, #80]	; (8001568 <FLASH_SetErrorCode+0xa8>)
 8001516:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <FLASH_SetErrorCode+0xa4>)
 800151a:	2240      	movs	r2, #64	; 0x40
 800151c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <FLASH_SetErrorCode+0xa4>)
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001526:	2b00      	cmp	r3, #0
 8001528:	d008      	beq.n	800153c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800152a:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <FLASH_SetErrorCode+0xa8>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	f043 0302 	orr.w	r3, r3, #2
 8001532:	4a0d      	ldr	r2, [pc, #52]	; (8001568 <FLASH_SetErrorCode+0xa8>)
 8001534:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <FLASH_SetErrorCode+0xa4>)
 8001538:	2280      	movs	r2, #128	; 0x80
 800153a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <FLASH_SetErrorCode+0xa4>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d008      	beq.n	800155a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <FLASH_SetErrorCode+0xa8>)
 800154a:	69db      	ldr	r3, [r3, #28]
 800154c:	f043 0320 	orr.w	r3, r3, #32
 8001550:	4a05      	ldr	r2, [pc, #20]	; (8001568 <FLASH_SetErrorCode+0xa8>)
 8001552:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001554:	4b03      	ldr	r3, [pc, #12]	; (8001564 <FLASH_SetErrorCode+0xa4>)
 8001556:	2202      	movs	r2, #2
 8001558:	60da      	str	r2, [r3, #12]
  }
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	40023c00 	.word	0x40023c00
 8001568:	200000ec 	.word	0x200000ec

0800156c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800157e:	4b31      	ldr	r3, [pc, #196]	; (8001644 <HAL_FLASHEx_Erase+0xd8>)
 8001580:	7e1b      	ldrb	r3, [r3, #24]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d101      	bne.n	800158a <HAL_FLASHEx_Erase+0x1e>
 8001586:	2302      	movs	r3, #2
 8001588:	e058      	b.n	800163c <HAL_FLASHEx_Erase+0xd0>
 800158a:	4b2e      	ldr	r3, [pc, #184]	; (8001644 <HAL_FLASHEx_Erase+0xd8>)
 800158c:	2201      	movs	r2, #1
 800158e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001590:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001594:	f7ff feba 	bl	800130c <FLASH_WaitForLastOperation>
 8001598:	4603      	mov	r3, r0
 800159a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d148      	bne.n	8001634 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	f04f 32ff 	mov.w	r2, #4294967295
 80015a8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d115      	bne.n	80015de <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	4619      	mov	r1, r3
 80015be:	4610      	mov	r0, r2
 80015c0:	f000 f844 	bl	800164c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015c4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015c8:	f7ff fea0 	bl	800130c <FLASH_WaitForLastOperation>
 80015cc:	4603      	mov	r3, r0
 80015ce:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80015d0:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <HAL_FLASHEx_Erase+0xdc>)
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	4a1c      	ldr	r2, [pc, #112]	; (8001648 <HAL_FLASHEx_Erase+0xdc>)
 80015d6:	f023 0304 	bic.w	r3, r3, #4
 80015da:	6113      	str	r3, [r2, #16]
 80015dc:	e028      	b.n	8001630 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	e01c      	b.n	8001620 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	4619      	mov	r1, r3
 80015ee:	68b8      	ldr	r0, [r7, #8]
 80015f0:	f000 f850 	bl	8001694 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80015f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80015f8:	f7ff fe88 	bl	800130c <FLASH_WaitForLastOperation>
 80015fc:	4603      	mov	r3, r0
 80015fe:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_FLASHEx_Erase+0xdc>)
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	4a10      	ldr	r2, [pc, #64]	; (8001648 <HAL_FLASHEx_Erase+0xdc>)
 8001606:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800160a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	601a      	str	r2, [r3, #0]
          break;
 8001618:	e00a      	b.n	8001630 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	3301      	adds	r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	4413      	add	r3, r2
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	429a      	cmp	r2, r3
 800162e:	d3da      	bcc.n	80015e6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001630:	f000 f878 	bl	8001724 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001634:	4b03      	ldr	r3, [pc, #12]	; (8001644 <HAL_FLASHEx_Erase+0xd8>)
 8001636:	2200      	movs	r2, #0
 8001638:	761a      	strb	r2, [r3, #24]

  return status;
 800163a:	7bfb      	ldrb	r3, [r7, #15]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200000ec 	.word	0x200000ec
 8001648:	40023c00 	.word	0x40023c00

0800164c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	6039      	str	r1, [r7, #0]
 8001656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001658:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <FLASH_MassErase+0x44>)
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	4a0c      	ldr	r2, [pc, #48]	; (8001690 <FLASH_MassErase+0x44>)
 800165e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001662:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001664:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <FLASH_MassErase+0x44>)
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	4a09      	ldr	r2, [pc, #36]	; (8001690 <FLASH_MassErase+0x44>)
 800166a:	f043 0304 	orr.w	r3, r3, #4
 800166e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001670:	4b07      	ldr	r3, [pc, #28]	; (8001690 <FLASH_MassErase+0x44>)
 8001672:	691a      	ldr	r2, [r3, #16]
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	021b      	lsls	r3, r3, #8
 8001678:	4313      	orrs	r3, r2
 800167a:	4a05      	ldr	r2, [pc, #20]	; (8001690 <FLASH_MassErase+0x44>)
 800167c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001680:	6113      	str	r3, [r2, #16]
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	40023c00 	.word	0x40023c00

08001694 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d102      	bne.n	80016b0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	e010      	b.n	80016d2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80016b0:	78fb      	ldrb	r3, [r7, #3]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d103      	bne.n	80016be <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80016b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	e009      	b.n	80016d2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80016be:	78fb      	ldrb	r3, [r7, #3]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d103      	bne.n	80016cc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80016c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	e002      	b.n	80016d2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80016cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016d0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80016d2:	4b13      	ldr	r3, [pc, #76]	; (8001720 <FLASH_Erase_Sector+0x8c>)
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	4a12      	ldr	r2, [pc, #72]	; (8001720 <FLASH_Erase_Sector+0x8c>)
 80016d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <FLASH_Erase_Sector+0x8c>)
 80016e0:	691a      	ldr	r2, [r3, #16]
 80016e2:	490f      	ldr	r1, [pc, #60]	; (8001720 <FLASH_Erase_Sector+0x8c>)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80016ea:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <FLASH_Erase_Sector+0x8c>)
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	4a0c      	ldr	r2, [pc, #48]	; (8001720 <FLASH_Erase_Sector+0x8c>)
 80016f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80016f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80016f6:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <FLASH_Erase_Sector+0x8c>)
 80016f8:	691a      	ldr	r2, [r3, #16]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	4313      	orrs	r3, r2
 8001700:	4a07      	ldr	r2, [pc, #28]	; (8001720 <FLASH_Erase_Sector+0x8c>)
 8001702:	f043 0302 	orr.w	r3, r3, #2
 8001706:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <FLASH_Erase_Sector+0x8c>)
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	4a04      	ldr	r2, [pc, #16]	; (8001720 <FLASH_Erase_Sector+0x8c>)
 800170e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001712:	6113      	str	r3, [r2, #16]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	40023c00 	.word	0x40023c00

08001724 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001728:	4b20      	ldr	r3, [pc, #128]	; (80017ac <FLASH_FlushCaches+0x88>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001730:	2b00      	cmp	r3, #0
 8001732:	d017      	beq.n	8001764 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001734:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <FLASH_FlushCaches+0x88>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a1c      	ldr	r2, [pc, #112]	; (80017ac <FLASH_FlushCaches+0x88>)
 800173a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800173e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001740:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <FLASH_FlushCaches+0x88>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a19      	ldr	r2, [pc, #100]	; (80017ac <FLASH_FlushCaches+0x88>)
 8001746:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	4b17      	ldr	r3, [pc, #92]	; (80017ac <FLASH_FlushCaches+0x88>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a16      	ldr	r2, [pc, #88]	; (80017ac <FLASH_FlushCaches+0x88>)
 8001752:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001756:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001758:	4b14      	ldr	r3, [pc, #80]	; (80017ac <FLASH_FlushCaches+0x88>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a13      	ldr	r2, [pc, #76]	; (80017ac <FLASH_FlushCaches+0x88>)
 800175e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001762:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <FLASH_FlushCaches+0x88>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800176c:	2b00      	cmp	r3, #0
 800176e:	d017      	beq.n	80017a0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001770:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <FLASH_FlushCaches+0x88>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0d      	ldr	r2, [pc, #52]	; (80017ac <FLASH_FlushCaches+0x88>)
 8001776:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800177a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <FLASH_FlushCaches+0x88>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <FLASH_FlushCaches+0x88>)
 8001782:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <FLASH_FlushCaches+0x88>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a07      	ldr	r2, [pc, #28]	; (80017ac <FLASH_FlushCaches+0x88>)
 800178e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001792:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001794:	4b05      	ldr	r3, [pc, #20]	; (80017ac <FLASH_FlushCaches+0x88>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <FLASH_FlushCaches+0x88>)
 800179a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800179e:	6013      	str	r3, [r2, #0]
  }
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40023c00 	.word	0x40023c00

080017b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b089      	sub	sp, #36	; 0x24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
 80017ca:	e16b      	b.n	8001aa4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017cc:	2201      	movs	r2, #1
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	f040 815a 	bne.w	8001a9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d005      	beq.n	8001802 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d130      	bne.n	8001864 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4313      	orrs	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001838:	2201      	movs	r2, #1
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	f003 0201 	and.w	r2, r3, #1
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	2b03      	cmp	r3, #3
 800186e:	d017      	beq.n	80018a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	2203      	movs	r2, #3
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d123      	bne.n	80018f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	08da      	lsrs	r2, r3, #3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3208      	adds	r2, #8
 80018b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	220f      	movs	r2, #15
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	691a      	ldr	r2, [r3, #16]
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	08da      	lsrs	r2, r3, #3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3208      	adds	r2, #8
 80018ee:	69b9      	ldr	r1, [r7, #24]
 80018f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0203 	and.w	r2, r3, #3
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 80b4 	beq.w	8001a9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b60      	ldr	r3, [pc, #384]	; (8001abc <HAL_GPIO_Init+0x30c>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	4a5f      	ldr	r2, [pc, #380]	; (8001abc <HAL_GPIO_Init+0x30c>)
 8001940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001944:	6453      	str	r3, [r2, #68]	; 0x44
 8001946:	4b5d      	ldr	r3, [pc, #372]	; (8001abc <HAL_GPIO_Init+0x30c>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001952:	4a5b      	ldr	r2, [pc, #364]	; (8001ac0 <HAL_GPIO_Init+0x310>)
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	089b      	lsrs	r3, r3, #2
 8001958:	3302      	adds	r3, #2
 800195a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	220f      	movs	r2, #15
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a52      	ldr	r2, [pc, #328]	; (8001ac4 <HAL_GPIO_Init+0x314>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d02b      	beq.n	80019d6 <HAL_GPIO_Init+0x226>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a51      	ldr	r2, [pc, #324]	; (8001ac8 <HAL_GPIO_Init+0x318>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d025      	beq.n	80019d2 <HAL_GPIO_Init+0x222>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a50      	ldr	r2, [pc, #320]	; (8001acc <HAL_GPIO_Init+0x31c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d01f      	beq.n	80019ce <HAL_GPIO_Init+0x21e>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a4f      	ldr	r2, [pc, #316]	; (8001ad0 <HAL_GPIO_Init+0x320>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d019      	beq.n	80019ca <HAL_GPIO_Init+0x21a>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a4e      	ldr	r2, [pc, #312]	; (8001ad4 <HAL_GPIO_Init+0x324>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d013      	beq.n	80019c6 <HAL_GPIO_Init+0x216>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a4d      	ldr	r2, [pc, #308]	; (8001ad8 <HAL_GPIO_Init+0x328>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d00d      	beq.n	80019c2 <HAL_GPIO_Init+0x212>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a4c      	ldr	r2, [pc, #304]	; (8001adc <HAL_GPIO_Init+0x32c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d007      	beq.n	80019be <HAL_GPIO_Init+0x20e>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a4b      	ldr	r2, [pc, #300]	; (8001ae0 <HAL_GPIO_Init+0x330>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d101      	bne.n	80019ba <HAL_GPIO_Init+0x20a>
 80019b6:	2307      	movs	r3, #7
 80019b8:	e00e      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019ba:	2308      	movs	r3, #8
 80019bc:	e00c      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019be:	2306      	movs	r3, #6
 80019c0:	e00a      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019c2:	2305      	movs	r3, #5
 80019c4:	e008      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019c6:	2304      	movs	r3, #4
 80019c8:	e006      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019ca:	2303      	movs	r3, #3
 80019cc:	e004      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e002      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <HAL_GPIO_Init+0x228>
 80019d6:	2300      	movs	r3, #0
 80019d8:	69fa      	ldr	r2, [r7, #28]
 80019da:	f002 0203 	and.w	r2, r2, #3
 80019de:	0092      	lsls	r2, r2, #2
 80019e0:	4093      	lsls	r3, r2
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019e8:	4935      	ldr	r1, [pc, #212]	; (8001ac0 <HAL_GPIO_Init+0x310>)
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	089b      	lsrs	r3, r3, #2
 80019ee:	3302      	adds	r3, #2
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019f6:	4b3b      	ldr	r3, [pc, #236]	; (8001ae4 <HAL_GPIO_Init+0x334>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a1a:	4a32      	ldr	r2, [pc, #200]	; (8001ae4 <HAL_GPIO_Init+0x334>)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a20:	4b30      	ldr	r3, [pc, #192]	; (8001ae4 <HAL_GPIO_Init+0x334>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a44:	4a27      	ldr	r2, [pc, #156]	; (8001ae4 <HAL_GPIO_Init+0x334>)
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a4a:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <HAL_GPIO_Init+0x334>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a6e:	4a1d      	ldr	r2, [pc, #116]	; (8001ae4 <HAL_GPIO_Init+0x334>)
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <HAL_GPIO_Init+0x334>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a98:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <HAL_GPIO_Init+0x334>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	61fb      	str	r3, [r7, #28]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	2b0f      	cmp	r3, #15
 8001aa8:	f67f ae90 	bls.w	80017cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	3724      	adds	r7, #36	; 0x24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40013800 	.word	0x40013800
 8001ac4:	40020000 	.word	0x40020000
 8001ac8:	40020400 	.word	0x40020400
 8001acc:	40020800 	.word	0x40020800
 8001ad0:	40020c00 	.word	0x40020c00
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40021400 	.word	0x40021400
 8001adc:	40021800 	.word	0x40021800
 8001ae0:	40021c00 	.word	0x40021c00
 8001ae4:	40013c00 	.word	0x40013c00

08001ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	807b      	strh	r3, [r7, #2]
 8001af4:	4613      	mov	r3, r2
 8001af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001af8:	787b      	ldrb	r3, [r7, #1]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001afe:	887a      	ldrh	r2, [r7, #2]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b04:	e003      	b.n	8001b0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b06:	887b      	ldrh	r3, [r7, #2]
 8001b08:	041a      	lsls	r2, r3, #16
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	619a      	str	r2, [r3, #24]
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
	...

08001b1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e267      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d075      	beq.n	8001c26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b3a:	4b88      	ldr	r3, [pc, #544]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	d00c      	beq.n	8001b60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b46:	4b85      	ldr	r3, [pc, #532]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b4e:	2b08      	cmp	r3, #8
 8001b50:	d112      	bne.n	8001b78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b52:	4b82      	ldr	r3, [pc, #520]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b5e:	d10b      	bne.n	8001b78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b60:	4b7e      	ldr	r3, [pc, #504]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d05b      	beq.n	8001c24 <HAL_RCC_OscConfig+0x108>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d157      	bne.n	8001c24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e242      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b80:	d106      	bne.n	8001b90 <HAL_RCC_OscConfig+0x74>
 8001b82:	4b76      	ldr	r3, [pc, #472]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a75      	ldr	r2, [pc, #468]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	e01d      	b.n	8001bcc <HAL_RCC_OscConfig+0xb0>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b98:	d10c      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x98>
 8001b9a:	4b70      	ldr	r3, [pc, #448]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a6f      	ldr	r2, [pc, #444]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	4b6d      	ldr	r3, [pc, #436]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a6c      	ldr	r2, [pc, #432]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	e00b      	b.n	8001bcc <HAL_RCC_OscConfig+0xb0>
 8001bb4:	4b69      	ldr	r3, [pc, #420]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a68      	ldr	r2, [pc, #416]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	4b66      	ldr	r3, [pc, #408]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a65      	ldr	r2, [pc, #404]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d013      	beq.n	8001bfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd4:	f7ff f9f2 	bl	8000fbc <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bdc:	f7ff f9ee 	bl	8000fbc <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b64      	cmp	r3, #100	; 0x64
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e207      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bee:	4b5b      	ldr	r3, [pc, #364]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0xc0>
 8001bfa:	e014      	b.n	8001c26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7ff f9de 	bl	8000fbc <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c04:	f7ff f9da 	bl	8000fbc <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	; 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e1f3      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c16:	4b51      	ldr	r3, [pc, #324]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0xe8>
 8001c22:	e000      	b.n	8001c26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d063      	beq.n	8001cfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c32:	4b4a      	ldr	r3, [pc, #296]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00b      	beq.n	8001c56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c3e:	4b47      	ldr	r3, [pc, #284]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c46:	2b08      	cmp	r3, #8
 8001c48:	d11c      	bne.n	8001c84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c4a:	4b44      	ldr	r3, [pc, #272]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d116      	bne.n	8001c84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c56:	4b41      	ldr	r3, [pc, #260]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d005      	beq.n	8001c6e <HAL_RCC_OscConfig+0x152>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d001      	beq.n	8001c6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e1c7      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6e:	4b3b      	ldr	r3, [pc, #236]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	4937      	ldr	r1, [pc, #220]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c82:	e03a      	b.n	8001cfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d020      	beq.n	8001cce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c8c:	4b34      	ldr	r3, [pc, #208]	; (8001d60 <HAL_RCC_OscConfig+0x244>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c92:	f7ff f993 	bl	8000fbc <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c9a:	f7ff f98f 	bl	8000fbc <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e1a8      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cac:	4b2b      	ldr	r3, [pc, #172]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0f0      	beq.n	8001c9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb8:	4b28      	ldr	r3, [pc, #160]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	4925      	ldr	r1, [pc, #148]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	600b      	str	r3, [r1, #0]
 8001ccc:	e015      	b.n	8001cfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cce:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <HAL_RCC_OscConfig+0x244>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd4:	f7ff f972 	bl	8000fbc <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cdc:	f7ff f96e 	bl	8000fbc <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e187      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cee:	4b1b      	ldr	r3, [pc, #108]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d036      	beq.n	8001d74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d016      	beq.n	8001d3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <HAL_RCC_OscConfig+0x248>)
 8001d10:	2201      	movs	r2, #1
 8001d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d14:	f7ff f952 	bl	8000fbc <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d1c:	f7ff f94e 	bl	8000fbc <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e167      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_RCC_OscConfig+0x240>)
 8001d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0x200>
 8001d3a:	e01b      	b.n	8001d74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_RCC_OscConfig+0x248>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d42:	f7ff f93b 	bl	8000fbc <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d48:	e00e      	b.n	8001d68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d4a:	f7ff f937 	bl	8000fbc <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d907      	bls.n	8001d68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e150      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	42470000 	.word	0x42470000
 8001d64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d68:	4b88      	ldr	r3, [pc, #544]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1ea      	bne.n	8001d4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 8097 	beq.w	8001eb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d86:	4b81      	ldr	r3, [pc, #516]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10f      	bne.n	8001db2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	4b7d      	ldr	r3, [pc, #500]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	4a7c      	ldr	r2, [pc, #496]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001da0:	6413      	str	r3, [r2, #64]	; 0x40
 8001da2:	4b7a      	ldr	r3, [pc, #488]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dae:	2301      	movs	r3, #1
 8001db0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db2:	4b77      	ldr	r3, [pc, #476]	; (8001f90 <HAL_RCC_OscConfig+0x474>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d118      	bne.n	8001df0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dbe:	4b74      	ldr	r3, [pc, #464]	; (8001f90 <HAL_RCC_OscConfig+0x474>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a73      	ldr	r2, [pc, #460]	; (8001f90 <HAL_RCC_OscConfig+0x474>)
 8001dc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dca:	f7ff f8f7 	bl	8000fbc <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd2:	f7ff f8f3 	bl	8000fbc <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e10c      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de4:	4b6a      	ldr	r3, [pc, #424]	; (8001f90 <HAL_RCC_OscConfig+0x474>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d106      	bne.n	8001e06 <HAL_RCC_OscConfig+0x2ea>
 8001df8:	4b64      	ldr	r3, [pc, #400]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfc:	4a63      	ldr	r2, [pc, #396]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001dfe:	f043 0301 	orr.w	r3, r3, #1
 8001e02:	6713      	str	r3, [r2, #112]	; 0x70
 8001e04:	e01c      	b.n	8001e40 <HAL_RCC_OscConfig+0x324>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b05      	cmp	r3, #5
 8001e0c:	d10c      	bne.n	8001e28 <HAL_RCC_OscConfig+0x30c>
 8001e0e:	4b5f      	ldr	r3, [pc, #380]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e12:	4a5e      	ldr	r2, [pc, #376]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001e14:	f043 0304 	orr.w	r3, r3, #4
 8001e18:	6713      	str	r3, [r2, #112]	; 0x70
 8001e1a:	4b5c      	ldr	r3, [pc, #368]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1e:	4a5b      	ldr	r2, [pc, #364]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6713      	str	r3, [r2, #112]	; 0x70
 8001e26:	e00b      	b.n	8001e40 <HAL_RCC_OscConfig+0x324>
 8001e28:	4b58      	ldr	r3, [pc, #352]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2c:	4a57      	ldr	r2, [pc, #348]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001e2e:	f023 0301 	bic.w	r3, r3, #1
 8001e32:	6713      	str	r3, [r2, #112]	; 0x70
 8001e34:	4b55      	ldr	r3, [pc, #340]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e38:	4a54      	ldr	r2, [pc, #336]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001e3a:	f023 0304 	bic.w	r3, r3, #4
 8001e3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d015      	beq.n	8001e74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e48:	f7ff f8b8 	bl	8000fbc <HAL_GetTick>
 8001e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4e:	e00a      	b.n	8001e66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e50:	f7ff f8b4 	bl	8000fbc <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e0cb      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e66:	4b49      	ldr	r3, [pc, #292]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0ee      	beq.n	8001e50 <HAL_RCC_OscConfig+0x334>
 8001e72:	e014      	b.n	8001e9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e74:	f7ff f8a2 	bl	8000fbc <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e7a:	e00a      	b.n	8001e92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e7c:	f7ff f89e 	bl	8000fbc <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e0b5      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e92:	4b3e      	ldr	r3, [pc, #248]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1ee      	bne.n	8001e7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d105      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ea4:	4b39      	ldr	r3, [pc, #228]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	4a38      	ldr	r2, [pc, #224]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001eaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 80a1 	beq.w	8001ffc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eba:	4b34      	ldr	r3, [pc, #208]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	2b08      	cmp	r3, #8
 8001ec4:	d05c      	beq.n	8001f80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d141      	bne.n	8001f52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ece:	4b31      	ldr	r3, [pc, #196]	; (8001f94 <HAL_RCC_OscConfig+0x478>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7ff f872 	bl	8000fbc <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001edc:	f7ff f86e 	bl	8000fbc <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e087      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eee:	4b27      	ldr	r3, [pc, #156]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69da      	ldr	r2, [r3, #28]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f08:	019b      	lsls	r3, r3, #6
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f10:	085b      	lsrs	r3, r3, #1
 8001f12:	3b01      	subs	r3, #1
 8001f14:	041b      	lsls	r3, r3, #16
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1c:	061b      	lsls	r3, r3, #24
 8001f1e:	491b      	ldr	r1, [pc, #108]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f24:	4b1b      	ldr	r3, [pc, #108]	; (8001f94 <HAL_RCC_OscConfig+0x478>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2a:	f7ff f847 	bl	8000fbc <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f32:	f7ff f843 	bl	8000fbc <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e05c      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0f0      	beq.n	8001f32 <HAL_RCC_OscConfig+0x416>
 8001f50:	e054      	b.n	8001ffc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <HAL_RCC_OscConfig+0x478>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7ff f830 	bl	8000fbc <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f60:	f7ff f82c 	bl	8000fbc <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e045      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_RCC_OscConfig+0x470>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x444>
 8001f7e:	e03d      	b.n	8001ffc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e038      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40007000 	.word	0x40007000
 8001f94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f98:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <HAL_RCC_OscConfig+0x4ec>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d028      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d121      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d11a      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001fc8:	4013      	ands	r3, r2
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d111      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fde:	085b      	lsrs	r3, r3, #1
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d107      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e000      	b.n	8001ffe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40023800 	.word	0x40023800

0800200c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0cc      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002020:	4b68      	ldr	r3, [pc, #416]	; (80021c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0307 	and.w	r3, r3, #7
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d90c      	bls.n	8002048 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202e:	4b65      	ldr	r3, [pc, #404]	; (80021c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002036:	4b63      	ldr	r3, [pc, #396]	; (80021c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0b8      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d020      	beq.n	8002096 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002060:	4b59      	ldr	r3, [pc, #356]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4a58      	ldr	r2, [pc, #352]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002066:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800206a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0308 	and.w	r3, r3, #8
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002078:	4b53      	ldr	r3, [pc, #332]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	4a52      	ldr	r2, [pc, #328]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 800207e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002082:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002084:	4b50      	ldr	r3, [pc, #320]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	494d      	ldr	r1, [pc, #308]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002092:	4313      	orrs	r3, r2
 8002094:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d044      	beq.n	800212c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d107      	bne.n	80020ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d119      	bne.n	80020ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e07f      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d003      	beq.n	80020ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d107      	bne.n	80020da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ca:	4b3f      	ldr	r3, [pc, #252]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d109      	bne.n	80020ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e06f      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020da:	4b3b      	ldr	r3, [pc, #236]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e067      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ea:	4b37      	ldr	r3, [pc, #220]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f023 0203 	bic.w	r2, r3, #3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	4934      	ldr	r1, [pc, #208]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020fc:	f7fe ff5e 	bl	8000fbc <HAL_GetTick>
 8002100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002102:	e00a      	b.n	800211a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002104:	f7fe ff5a 	bl	8000fbc <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002112:	4293      	cmp	r3, r2
 8002114:	d901      	bls.n	800211a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e04f      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211a:	4b2b      	ldr	r3, [pc, #172]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 020c 	and.w	r2, r3, #12
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	429a      	cmp	r2, r3
 800212a:	d1eb      	bne.n	8002104 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800212c:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <HAL_RCC_ClockConfig+0x1b8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d20c      	bcs.n	8002154 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213a:	4b22      	ldr	r3, [pc, #136]	; (80021c4 <HAL_RCC_ClockConfig+0x1b8>)
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002142:	4b20      	ldr	r3, [pc, #128]	; (80021c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d001      	beq.n	8002154 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e032      	b.n	80021ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0304 	and.w	r3, r3, #4
 800215c:	2b00      	cmp	r3, #0
 800215e:	d008      	beq.n	8002172 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002160:	4b19      	ldr	r3, [pc, #100]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	4916      	ldr	r1, [pc, #88]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	4313      	orrs	r3, r2
 8002170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d009      	beq.n	8002192 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800217e:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	490e      	ldr	r1, [pc, #56]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	4313      	orrs	r3, r2
 8002190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002192:	f000 f821 	bl	80021d8 <HAL_RCC_GetSysClockFreq>
 8002196:	4602      	mov	r2, r0
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	091b      	lsrs	r3, r3, #4
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	490a      	ldr	r1, [pc, #40]	; (80021cc <HAL_RCC_ClockConfig+0x1c0>)
 80021a4:	5ccb      	ldrb	r3, [r1, r3]
 80021a6:	fa22 f303 	lsr.w	r3, r2, r3
 80021aa:	4a09      	ldr	r2, [pc, #36]	; (80021d0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_RCC_ClockConfig+0x1c8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe febe 	bl	8000f34 <HAL_InitTick>

  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40023c00 	.word	0x40023c00
 80021c8:	40023800 	.word	0x40023800
 80021cc:	08003d64 	.word	0x08003d64
 80021d0:	20000000 	.word	0x20000000
 80021d4:	20000004 	.word	0x20000004

080021d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021dc:	b094      	sub	sp, #80	; 0x50
 80021de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	647b      	str	r3, [r7, #68]	; 0x44
 80021e4:	2300      	movs	r3, #0
 80021e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021e8:	2300      	movs	r3, #0
 80021ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80021ec:	2300      	movs	r3, #0
 80021ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021f0:	4b79      	ldr	r3, [pc, #484]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d00d      	beq.n	8002218 <HAL_RCC_GetSysClockFreq+0x40>
 80021fc:	2b08      	cmp	r3, #8
 80021fe:	f200 80e1 	bhi.w	80023c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <HAL_RCC_GetSysClockFreq+0x34>
 8002206:	2b04      	cmp	r3, #4
 8002208:	d003      	beq.n	8002212 <HAL_RCC_GetSysClockFreq+0x3a>
 800220a:	e0db      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800220c:	4b73      	ldr	r3, [pc, #460]	; (80023dc <HAL_RCC_GetSysClockFreq+0x204>)
 800220e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002210:	e0db      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002212:	4b73      	ldr	r3, [pc, #460]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002214:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002216:	e0d8      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002218:	4b6f      	ldr	r3, [pc, #444]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002220:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002222:	4b6d      	ldr	r3, [pc, #436]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d063      	beq.n	80022f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800222e:	4b6a      	ldr	r3, [pc, #424]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	099b      	lsrs	r3, r3, #6
 8002234:	2200      	movs	r2, #0
 8002236:	63bb      	str	r3, [r7, #56]	; 0x38
 8002238:	63fa      	str	r2, [r7, #60]	; 0x3c
 800223a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800223c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002240:	633b      	str	r3, [r7, #48]	; 0x30
 8002242:	2300      	movs	r3, #0
 8002244:	637b      	str	r3, [r7, #52]	; 0x34
 8002246:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800224a:	4622      	mov	r2, r4
 800224c:	462b      	mov	r3, r5
 800224e:	f04f 0000 	mov.w	r0, #0
 8002252:	f04f 0100 	mov.w	r1, #0
 8002256:	0159      	lsls	r1, r3, #5
 8002258:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800225c:	0150      	lsls	r0, r2, #5
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	4621      	mov	r1, r4
 8002264:	1a51      	subs	r1, r2, r1
 8002266:	6139      	str	r1, [r7, #16]
 8002268:	4629      	mov	r1, r5
 800226a:	eb63 0301 	sbc.w	r3, r3, r1
 800226e:	617b      	str	r3, [r7, #20]
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	f04f 0300 	mov.w	r3, #0
 8002278:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800227c:	4659      	mov	r1, fp
 800227e:	018b      	lsls	r3, r1, #6
 8002280:	4651      	mov	r1, sl
 8002282:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002286:	4651      	mov	r1, sl
 8002288:	018a      	lsls	r2, r1, #6
 800228a:	4651      	mov	r1, sl
 800228c:	ebb2 0801 	subs.w	r8, r2, r1
 8002290:	4659      	mov	r1, fp
 8002292:	eb63 0901 	sbc.w	r9, r3, r1
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022aa:	4690      	mov	r8, r2
 80022ac:	4699      	mov	r9, r3
 80022ae:	4623      	mov	r3, r4
 80022b0:	eb18 0303 	adds.w	r3, r8, r3
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	462b      	mov	r3, r5
 80022b8:	eb49 0303 	adc.w	r3, r9, r3
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	f04f 0300 	mov.w	r3, #0
 80022c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022ca:	4629      	mov	r1, r5
 80022cc:	024b      	lsls	r3, r1, #9
 80022ce:	4621      	mov	r1, r4
 80022d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022d4:	4621      	mov	r1, r4
 80022d6:	024a      	lsls	r2, r1, #9
 80022d8:	4610      	mov	r0, r2
 80022da:	4619      	mov	r1, r3
 80022dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022de:	2200      	movs	r2, #0
 80022e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80022e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80022e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80022e8:	f7fd ffca 	bl	8000280 <__aeabi_uldivmod>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4613      	mov	r3, r2
 80022f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022f4:	e058      	b.n	80023a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022f6:	4b38      	ldr	r3, [pc, #224]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	099b      	lsrs	r3, r3, #6
 80022fc:	2200      	movs	r2, #0
 80022fe:	4618      	mov	r0, r3
 8002300:	4611      	mov	r1, r2
 8002302:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002306:	623b      	str	r3, [r7, #32]
 8002308:	2300      	movs	r3, #0
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
 800230c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002310:	4642      	mov	r2, r8
 8002312:	464b      	mov	r3, r9
 8002314:	f04f 0000 	mov.w	r0, #0
 8002318:	f04f 0100 	mov.w	r1, #0
 800231c:	0159      	lsls	r1, r3, #5
 800231e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002322:	0150      	lsls	r0, r2, #5
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4641      	mov	r1, r8
 800232a:	ebb2 0a01 	subs.w	sl, r2, r1
 800232e:	4649      	mov	r1, r9
 8002330:	eb63 0b01 	sbc.w	fp, r3, r1
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002340:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002344:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002348:	ebb2 040a 	subs.w	r4, r2, sl
 800234c:	eb63 050b 	sbc.w	r5, r3, fp
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	f04f 0300 	mov.w	r3, #0
 8002358:	00eb      	lsls	r3, r5, #3
 800235a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800235e:	00e2      	lsls	r2, r4, #3
 8002360:	4614      	mov	r4, r2
 8002362:	461d      	mov	r5, r3
 8002364:	4643      	mov	r3, r8
 8002366:	18e3      	adds	r3, r4, r3
 8002368:	603b      	str	r3, [r7, #0]
 800236a:	464b      	mov	r3, r9
 800236c:	eb45 0303 	adc.w	r3, r5, r3
 8002370:	607b      	str	r3, [r7, #4]
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800237e:	4629      	mov	r1, r5
 8002380:	028b      	lsls	r3, r1, #10
 8002382:	4621      	mov	r1, r4
 8002384:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002388:	4621      	mov	r1, r4
 800238a:	028a      	lsls	r2, r1, #10
 800238c:	4610      	mov	r0, r2
 800238e:	4619      	mov	r1, r3
 8002390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002392:	2200      	movs	r2, #0
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	61fa      	str	r2, [r7, #28]
 8002398:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800239c:	f7fd ff70 	bl	8000280 <__aeabi_uldivmod>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4613      	mov	r3, r2
 80023a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	0c1b      	lsrs	r3, r3, #16
 80023ae:	f003 0303 	and.w	r3, r3, #3
 80023b2:	3301      	adds	r3, #1
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80023b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023c2:	e002      	b.n	80023ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023c4:	4b05      	ldr	r3, [pc, #20]	; (80023dc <HAL_RCC_GetSysClockFreq+0x204>)
 80023c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3750      	adds	r7, #80	; 0x50
 80023d0:	46bd      	mov	sp, r7
 80023d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023d6:	bf00      	nop
 80023d8:	40023800 	.word	0x40023800
 80023dc:	00f42400 	.word	0x00f42400
 80023e0:	007a1200 	.word	0x007a1200

080023e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023e8:	4b03      	ldr	r3, [pc, #12]	; (80023f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80023ea:	681b      	ldr	r3, [r3, #0]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20000000 	.word	0x20000000

080023fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002400:	f7ff fff0 	bl	80023e4 <HAL_RCC_GetHCLKFreq>
 8002404:	4602      	mov	r2, r0
 8002406:	4b05      	ldr	r3, [pc, #20]	; (800241c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	0a9b      	lsrs	r3, r3, #10
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	4903      	ldr	r1, [pc, #12]	; (8002420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002412:	5ccb      	ldrb	r3, [r1, r3]
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002418:	4618      	mov	r0, r3
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40023800 	.word	0x40023800
 8002420:	08003d74 	.word	0x08003d74

08002424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002428:	f7ff ffdc 	bl	80023e4 <HAL_RCC_GetHCLKFreq>
 800242c:	4602      	mov	r2, r0
 800242e:	4b05      	ldr	r3, [pc, #20]	; (8002444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	0b5b      	lsrs	r3, r3, #13
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	4903      	ldr	r1, [pc, #12]	; (8002448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800243a:	5ccb      	ldrb	r3, [r1, r3]
 800243c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002440:	4618      	mov	r0, r3
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40023800 	.word	0x40023800
 8002448:	08003d74 	.word	0x08003d74

0800244c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e03f      	b.n	80024de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7fe fbea 	bl	8000c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2224      	movs	r2, #36	; 0x24
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800248e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f929 	bl	80026e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	695a      	ldr	r2, [r3, #20]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2220      	movs	r2, #32
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2220      	movs	r2, #32
 80024d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b08a      	sub	sp, #40	; 0x28
 80024ea:	af02      	add	r7, sp, #8
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	603b      	str	r3, [r7, #0]
 80024f2:	4613      	mov	r3, r2
 80024f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024f6:	2300      	movs	r3, #0
 80024f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b20      	cmp	r3, #32
 8002504:	d17c      	bne.n	8002600 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <HAL_UART_Transmit+0x2c>
 800250c:	88fb      	ldrh	r3, [r7, #6]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e075      	b.n	8002602 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <HAL_UART_Transmit+0x3e>
 8002520:	2302      	movs	r3, #2
 8002522:	e06e      	b.n	8002602 <HAL_UART_Transmit+0x11c>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2221      	movs	r2, #33	; 0x21
 8002536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800253a:	f7fe fd3f 	bl	8000fbc <HAL_GetTick>
 800253e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	88fa      	ldrh	r2, [r7, #6]
 8002544:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	88fa      	ldrh	r2, [r7, #6]
 800254a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002554:	d108      	bne.n	8002568 <HAL_UART_Transmit+0x82>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d104      	bne.n	8002568 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	61bb      	str	r3, [r7, #24]
 8002566:	e003      	b.n	8002570 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800256c:	2300      	movs	r3, #0
 800256e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002578:	e02a      	b.n	80025d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	2200      	movs	r2, #0
 8002582:	2180      	movs	r1, #128	; 0x80
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 f840 	bl	800260a <UART_WaitOnFlagUntilTimeout>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e036      	b.n	8002602 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10b      	bne.n	80025b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	3302      	adds	r3, #2
 80025ae:	61bb      	str	r3, [r7, #24]
 80025b0:	e007      	b.n	80025c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	781a      	ldrb	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	3301      	adds	r3, #1
 80025c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1cf      	bne.n	800257a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2200      	movs	r2, #0
 80025e2:	2140      	movs	r1, #64	; 0x40
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 f810 	bl	800260a <UART_WaitOnFlagUntilTimeout>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e006      	b.n	8002602 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2220      	movs	r2, #32
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	e000      	b.n	8002602 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002600:	2302      	movs	r3, #2
  }
}
 8002602:	4618      	mov	r0, r3
 8002604:	3720      	adds	r7, #32
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b090      	sub	sp, #64	; 0x40
 800260e:	af00      	add	r7, sp, #0
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	603b      	str	r3, [r7, #0]
 8002616:	4613      	mov	r3, r2
 8002618:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800261a:	e050      	b.n	80026be <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800261c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800261e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002622:	d04c      	beq.n	80026be <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002626:	2b00      	cmp	r3, #0
 8002628:	d007      	beq.n	800263a <UART_WaitOnFlagUntilTimeout+0x30>
 800262a:	f7fe fcc7 	bl	8000fbc <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002636:	429a      	cmp	r2, r3
 8002638:	d241      	bcs.n	80026be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	330c      	adds	r3, #12
 8002640:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002644:	e853 3f00 	ldrex	r3, [r3]
 8002648:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002650:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	330c      	adds	r3, #12
 8002658:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800265a:	637a      	str	r2, [r7, #52]	; 0x34
 800265c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800265e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002660:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002662:	e841 2300 	strex	r3, r2, [r1]
 8002666:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1e5      	bne.n	800263a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	3314      	adds	r3, #20
 8002674:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	e853 3f00 	ldrex	r3, [r3]
 800267c:	613b      	str	r3, [r7, #16]
   return(result);
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	f023 0301 	bic.w	r3, r3, #1
 8002684:	63bb      	str	r3, [r7, #56]	; 0x38
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	3314      	adds	r3, #20
 800268c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800268e:	623a      	str	r2, [r7, #32]
 8002690:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002692:	69f9      	ldr	r1, [r7, #28]
 8002694:	6a3a      	ldr	r2, [r7, #32]
 8002696:	e841 2300 	strex	r3, r2, [r1]
 800269a:	61bb      	str	r3, [r7, #24]
   return(result);
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1e5      	bne.n	800266e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2220      	movs	r2, #32
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e00f      	b.n	80026de <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	4013      	ands	r3, r2
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	bf0c      	ite	eq
 80026ce:	2301      	moveq	r3, #1
 80026d0:	2300      	movne	r3, #0
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	461a      	mov	r2, r3
 80026d6:	79fb      	ldrb	r3, [r7, #7]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d09f      	beq.n	800261c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3740      	adds	r7, #64	; 0x40
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026ec:	b0c0      	sub	sp, #256	; 0x100
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002704:	68d9      	ldr	r1, [r3, #12]
 8002706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	ea40 0301 	orr.w	r3, r0, r1
 8002710:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	431a      	orrs	r2, r3
 8002720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	431a      	orrs	r2, r3
 8002728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	4313      	orrs	r3, r2
 8002730:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002740:	f021 010c 	bic.w	r1, r1, #12
 8002744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800274e:	430b      	orrs	r3, r1
 8002750:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800275e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002762:	6999      	ldr	r1, [r3, #24]
 8002764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	ea40 0301 	orr.w	r3, r0, r1
 800276e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	4b8f      	ldr	r3, [pc, #572]	; (80029b4 <UART_SetConfig+0x2cc>)
 8002778:	429a      	cmp	r2, r3
 800277a:	d005      	beq.n	8002788 <UART_SetConfig+0xa0>
 800277c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	4b8d      	ldr	r3, [pc, #564]	; (80029b8 <UART_SetConfig+0x2d0>)
 8002784:	429a      	cmp	r2, r3
 8002786:	d104      	bne.n	8002792 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002788:	f7ff fe4c 	bl	8002424 <HAL_RCC_GetPCLK2Freq>
 800278c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002790:	e003      	b.n	800279a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002792:	f7ff fe33 	bl	80023fc <HAL_RCC_GetPCLK1Freq>
 8002796:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800279a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027a4:	f040 810c 	bne.w	80029c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027ac:	2200      	movs	r2, #0
 80027ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80027b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80027b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80027ba:	4622      	mov	r2, r4
 80027bc:	462b      	mov	r3, r5
 80027be:	1891      	adds	r1, r2, r2
 80027c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80027c2:	415b      	adcs	r3, r3
 80027c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80027ca:	4621      	mov	r1, r4
 80027cc:	eb12 0801 	adds.w	r8, r2, r1
 80027d0:	4629      	mov	r1, r5
 80027d2:	eb43 0901 	adc.w	r9, r3, r1
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027ea:	4690      	mov	r8, r2
 80027ec:	4699      	mov	r9, r3
 80027ee:	4623      	mov	r3, r4
 80027f0:	eb18 0303 	adds.w	r3, r8, r3
 80027f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80027f8:	462b      	mov	r3, r5
 80027fa:	eb49 0303 	adc.w	r3, r9, r3
 80027fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800280e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002812:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002816:	460b      	mov	r3, r1
 8002818:	18db      	adds	r3, r3, r3
 800281a:	653b      	str	r3, [r7, #80]	; 0x50
 800281c:	4613      	mov	r3, r2
 800281e:	eb42 0303 	adc.w	r3, r2, r3
 8002822:	657b      	str	r3, [r7, #84]	; 0x54
 8002824:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002828:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800282c:	f7fd fd28 	bl	8000280 <__aeabi_uldivmod>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4b61      	ldr	r3, [pc, #388]	; (80029bc <UART_SetConfig+0x2d4>)
 8002836:	fba3 2302 	umull	r2, r3, r3, r2
 800283a:	095b      	lsrs	r3, r3, #5
 800283c:	011c      	lsls	r4, r3, #4
 800283e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002842:	2200      	movs	r2, #0
 8002844:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002848:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800284c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002850:	4642      	mov	r2, r8
 8002852:	464b      	mov	r3, r9
 8002854:	1891      	adds	r1, r2, r2
 8002856:	64b9      	str	r1, [r7, #72]	; 0x48
 8002858:	415b      	adcs	r3, r3
 800285a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800285c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002860:	4641      	mov	r1, r8
 8002862:	eb12 0a01 	adds.w	sl, r2, r1
 8002866:	4649      	mov	r1, r9
 8002868:	eb43 0b01 	adc.w	fp, r3, r1
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	f04f 0300 	mov.w	r3, #0
 8002874:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002878:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800287c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002880:	4692      	mov	sl, r2
 8002882:	469b      	mov	fp, r3
 8002884:	4643      	mov	r3, r8
 8002886:	eb1a 0303 	adds.w	r3, sl, r3
 800288a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800288e:	464b      	mov	r3, r9
 8002890:	eb4b 0303 	adc.w	r3, fp, r3
 8002894:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80028a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80028ac:	460b      	mov	r3, r1
 80028ae:	18db      	adds	r3, r3, r3
 80028b0:	643b      	str	r3, [r7, #64]	; 0x40
 80028b2:	4613      	mov	r3, r2
 80028b4:	eb42 0303 	adc.w	r3, r2, r3
 80028b8:	647b      	str	r3, [r7, #68]	; 0x44
 80028ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80028be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80028c2:	f7fd fcdd 	bl	8000280 <__aeabi_uldivmod>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4611      	mov	r1, r2
 80028cc:	4b3b      	ldr	r3, [pc, #236]	; (80029bc <UART_SetConfig+0x2d4>)
 80028ce:	fba3 2301 	umull	r2, r3, r3, r1
 80028d2:	095b      	lsrs	r3, r3, #5
 80028d4:	2264      	movs	r2, #100	; 0x64
 80028d6:	fb02 f303 	mul.w	r3, r2, r3
 80028da:	1acb      	subs	r3, r1, r3
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80028e2:	4b36      	ldr	r3, [pc, #216]	; (80029bc <UART_SetConfig+0x2d4>)
 80028e4:	fba3 2302 	umull	r2, r3, r3, r2
 80028e8:	095b      	lsrs	r3, r3, #5
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80028f0:	441c      	add	r4, r3
 80028f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028f6:	2200      	movs	r2, #0
 80028f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80028fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002900:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002904:	4642      	mov	r2, r8
 8002906:	464b      	mov	r3, r9
 8002908:	1891      	adds	r1, r2, r2
 800290a:	63b9      	str	r1, [r7, #56]	; 0x38
 800290c:	415b      	adcs	r3, r3
 800290e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002910:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002914:	4641      	mov	r1, r8
 8002916:	1851      	adds	r1, r2, r1
 8002918:	6339      	str	r1, [r7, #48]	; 0x30
 800291a:	4649      	mov	r1, r9
 800291c:	414b      	adcs	r3, r1
 800291e:	637b      	str	r3, [r7, #52]	; 0x34
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800292c:	4659      	mov	r1, fp
 800292e:	00cb      	lsls	r3, r1, #3
 8002930:	4651      	mov	r1, sl
 8002932:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002936:	4651      	mov	r1, sl
 8002938:	00ca      	lsls	r2, r1, #3
 800293a:	4610      	mov	r0, r2
 800293c:	4619      	mov	r1, r3
 800293e:	4603      	mov	r3, r0
 8002940:	4642      	mov	r2, r8
 8002942:	189b      	adds	r3, r3, r2
 8002944:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002948:	464b      	mov	r3, r9
 800294a:	460a      	mov	r2, r1
 800294c:	eb42 0303 	adc.w	r3, r2, r3
 8002950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002960:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002964:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002968:	460b      	mov	r3, r1
 800296a:	18db      	adds	r3, r3, r3
 800296c:	62bb      	str	r3, [r7, #40]	; 0x28
 800296e:	4613      	mov	r3, r2
 8002970:	eb42 0303 	adc.w	r3, r2, r3
 8002974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002976:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800297a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800297e:	f7fd fc7f 	bl	8000280 <__aeabi_uldivmod>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	4b0d      	ldr	r3, [pc, #52]	; (80029bc <UART_SetConfig+0x2d4>)
 8002988:	fba3 1302 	umull	r1, r3, r3, r2
 800298c:	095b      	lsrs	r3, r3, #5
 800298e:	2164      	movs	r1, #100	; 0x64
 8002990:	fb01 f303 	mul.w	r3, r1, r3
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	3332      	adds	r3, #50	; 0x32
 800299a:	4a08      	ldr	r2, [pc, #32]	; (80029bc <UART_SetConfig+0x2d4>)
 800299c:	fba2 2303 	umull	r2, r3, r2, r3
 80029a0:	095b      	lsrs	r3, r3, #5
 80029a2:	f003 0207 	and.w	r2, r3, #7
 80029a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4422      	add	r2, r4
 80029ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029b0:	e105      	b.n	8002bbe <UART_SetConfig+0x4d6>
 80029b2:	bf00      	nop
 80029b4:	40011000 	.word	0x40011000
 80029b8:	40011400 	.word	0x40011400
 80029bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029c4:	2200      	movs	r2, #0
 80029c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80029ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80029ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80029d2:	4642      	mov	r2, r8
 80029d4:	464b      	mov	r3, r9
 80029d6:	1891      	adds	r1, r2, r2
 80029d8:	6239      	str	r1, [r7, #32]
 80029da:	415b      	adcs	r3, r3
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
 80029de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029e2:	4641      	mov	r1, r8
 80029e4:	1854      	adds	r4, r2, r1
 80029e6:	4649      	mov	r1, r9
 80029e8:	eb43 0501 	adc.w	r5, r3, r1
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	00eb      	lsls	r3, r5, #3
 80029f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029fa:	00e2      	lsls	r2, r4, #3
 80029fc:	4614      	mov	r4, r2
 80029fe:	461d      	mov	r5, r3
 8002a00:	4643      	mov	r3, r8
 8002a02:	18e3      	adds	r3, r4, r3
 8002a04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a08:	464b      	mov	r3, r9
 8002a0a:	eb45 0303 	adc.w	r3, r5, r3
 8002a0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a2e:	4629      	mov	r1, r5
 8002a30:	008b      	lsls	r3, r1, #2
 8002a32:	4621      	mov	r1, r4
 8002a34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a38:	4621      	mov	r1, r4
 8002a3a:	008a      	lsls	r2, r1, #2
 8002a3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002a40:	f7fd fc1e 	bl	8000280 <__aeabi_uldivmod>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4b60      	ldr	r3, [pc, #384]	; (8002bcc <UART_SetConfig+0x4e4>)
 8002a4a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	011c      	lsls	r4, r3, #4
 8002a52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a56:	2200      	movs	r2, #0
 8002a58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002a60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002a64:	4642      	mov	r2, r8
 8002a66:	464b      	mov	r3, r9
 8002a68:	1891      	adds	r1, r2, r2
 8002a6a:	61b9      	str	r1, [r7, #24]
 8002a6c:	415b      	adcs	r3, r3
 8002a6e:	61fb      	str	r3, [r7, #28]
 8002a70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a74:	4641      	mov	r1, r8
 8002a76:	1851      	adds	r1, r2, r1
 8002a78:	6139      	str	r1, [r7, #16]
 8002a7a:	4649      	mov	r1, r9
 8002a7c:	414b      	adcs	r3, r1
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a8c:	4659      	mov	r1, fp
 8002a8e:	00cb      	lsls	r3, r1, #3
 8002a90:	4651      	mov	r1, sl
 8002a92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a96:	4651      	mov	r1, sl
 8002a98:	00ca      	lsls	r2, r1, #3
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	189b      	adds	r3, r3, r2
 8002aa4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002aa8:	464b      	mov	r3, r9
 8002aaa:	460a      	mov	r2, r1
 8002aac:	eb42 0303 	adc.w	r3, r2, r3
 8002ab0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002abe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	f04f 0300 	mov.w	r3, #0
 8002ac8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002acc:	4649      	mov	r1, r9
 8002ace:	008b      	lsls	r3, r1, #2
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ad6:	4641      	mov	r1, r8
 8002ad8:	008a      	lsls	r2, r1, #2
 8002ada:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002ade:	f7fd fbcf 	bl	8000280 <__aeabi_uldivmod>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	4b39      	ldr	r3, [pc, #228]	; (8002bcc <UART_SetConfig+0x4e4>)
 8002ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8002aec:	095b      	lsrs	r3, r3, #5
 8002aee:	2164      	movs	r1, #100	; 0x64
 8002af0:	fb01 f303 	mul.w	r3, r1, r3
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	3332      	adds	r3, #50	; 0x32
 8002afa:	4a34      	ldr	r2, [pc, #208]	; (8002bcc <UART_SetConfig+0x4e4>)
 8002afc:	fba2 2303 	umull	r2, r3, r2, r3
 8002b00:	095b      	lsrs	r3, r3, #5
 8002b02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b06:	441c      	add	r4, r3
 8002b08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	673b      	str	r3, [r7, #112]	; 0x70
 8002b10:	677a      	str	r2, [r7, #116]	; 0x74
 8002b12:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002b16:	4642      	mov	r2, r8
 8002b18:	464b      	mov	r3, r9
 8002b1a:	1891      	adds	r1, r2, r2
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	415b      	adcs	r3, r3
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b26:	4641      	mov	r1, r8
 8002b28:	1851      	adds	r1, r2, r1
 8002b2a:	6039      	str	r1, [r7, #0]
 8002b2c:	4649      	mov	r1, r9
 8002b2e:	414b      	adcs	r3, r1
 8002b30:	607b      	str	r3, [r7, #4]
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	f04f 0300 	mov.w	r3, #0
 8002b3a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b3e:	4659      	mov	r1, fp
 8002b40:	00cb      	lsls	r3, r1, #3
 8002b42:	4651      	mov	r1, sl
 8002b44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b48:	4651      	mov	r1, sl
 8002b4a:	00ca      	lsls	r2, r1, #3
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4603      	mov	r3, r0
 8002b52:	4642      	mov	r2, r8
 8002b54:	189b      	adds	r3, r3, r2
 8002b56:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b58:	464b      	mov	r3, r9
 8002b5a:	460a      	mov	r2, r1
 8002b5c:	eb42 0303 	adc.w	r3, r2, r3
 8002b60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	663b      	str	r3, [r7, #96]	; 0x60
 8002b6c:	667a      	str	r2, [r7, #100]	; 0x64
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002b7a:	4649      	mov	r1, r9
 8002b7c:	008b      	lsls	r3, r1, #2
 8002b7e:	4641      	mov	r1, r8
 8002b80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b84:	4641      	mov	r1, r8
 8002b86:	008a      	lsls	r2, r1, #2
 8002b88:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002b8c:	f7fd fb78 	bl	8000280 <__aeabi_uldivmod>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4b0d      	ldr	r3, [pc, #52]	; (8002bcc <UART_SetConfig+0x4e4>)
 8002b96:	fba3 1302 	umull	r1, r3, r3, r2
 8002b9a:	095b      	lsrs	r3, r3, #5
 8002b9c:	2164      	movs	r1, #100	; 0x64
 8002b9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	3332      	adds	r3, #50	; 0x32
 8002ba8:	4a08      	ldr	r2, [pc, #32]	; (8002bcc <UART_SetConfig+0x4e4>)
 8002baa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bae:	095b      	lsrs	r3, r3, #5
 8002bb0:	f003 020f 	and.w	r2, r3, #15
 8002bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4422      	add	r2, r4
 8002bbc:	609a      	str	r2, [r3, #8]
}
 8002bbe:	bf00      	nop
 8002bc0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bca:	bf00      	nop
 8002bcc:	51eb851f 	.word	0x51eb851f

08002bd0 <__errno>:
 8002bd0:	4b01      	ldr	r3, [pc, #4]	; (8002bd8 <__errno+0x8>)
 8002bd2:	6818      	ldr	r0, [r3, #0]
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	2000000c 	.word	0x2000000c

08002bdc <__libc_init_array>:
 8002bdc:	b570      	push	{r4, r5, r6, lr}
 8002bde:	4d0d      	ldr	r5, [pc, #52]	; (8002c14 <__libc_init_array+0x38>)
 8002be0:	4c0d      	ldr	r4, [pc, #52]	; (8002c18 <__libc_init_array+0x3c>)
 8002be2:	1b64      	subs	r4, r4, r5
 8002be4:	10a4      	asrs	r4, r4, #2
 8002be6:	2600      	movs	r6, #0
 8002be8:	42a6      	cmp	r6, r4
 8002bea:	d109      	bne.n	8002c00 <__libc_init_array+0x24>
 8002bec:	4d0b      	ldr	r5, [pc, #44]	; (8002c1c <__libc_init_array+0x40>)
 8002bee:	4c0c      	ldr	r4, [pc, #48]	; (8002c20 <__libc_init_array+0x44>)
 8002bf0:	f001 f824 	bl	8003c3c <_init>
 8002bf4:	1b64      	subs	r4, r4, r5
 8002bf6:	10a4      	asrs	r4, r4, #2
 8002bf8:	2600      	movs	r6, #0
 8002bfa:	42a6      	cmp	r6, r4
 8002bfc:	d105      	bne.n	8002c0a <__libc_init_array+0x2e>
 8002bfe:	bd70      	pop	{r4, r5, r6, pc}
 8002c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c04:	4798      	blx	r3
 8002c06:	3601      	adds	r6, #1
 8002c08:	e7ee      	b.n	8002be8 <__libc_init_array+0xc>
 8002c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c0e:	4798      	blx	r3
 8002c10:	3601      	adds	r6, #1
 8002c12:	e7f2      	b.n	8002bfa <__libc_init_array+0x1e>
 8002c14:	08003e1c 	.word	0x08003e1c
 8002c18:	08003e1c 	.word	0x08003e1c
 8002c1c:	08003e1c 	.word	0x08003e1c
 8002c20:	08003e20 	.word	0x08003e20

08002c24 <memset>:
 8002c24:	4402      	add	r2, r0
 8002c26:	4603      	mov	r3, r0
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d100      	bne.n	8002c2e <memset+0xa>
 8002c2c:	4770      	bx	lr
 8002c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c32:	e7f9      	b.n	8002c28 <memset+0x4>

08002c34 <iprintf>:
 8002c34:	b40f      	push	{r0, r1, r2, r3}
 8002c36:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <iprintf+0x2c>)
 8002c38:	b513      	push	{r0, r1, r4, lr}
 8002c3a:	681c      	ldr	r4, [r3, #0]
 8002c3c:	b124      	cbz	r4, 8002c48 <iprintf+0x14>
 8002c3e:	69a3      	ldr	r3, [r4, #24]
 8002c40:	b913      	cbnz	r3, 8002c48 <iprintf+0x14>
 8002c42:	4620      	mov	r0, r4
 8002c44:	f000 fa5e 	bl	8003104 <__sinit>
 8002c48:	ab05      	add	r3, sp, #20
 8002c4a:	9a04      	ldr	r2, [sp, #16]
 8002c4c:	68a1      	ldr	r1, [r4, #8]
 8002c4e:	9301      	str	r3, [sp, #4]
 8002c50:	4620      	mov	r0, r4
 8002c52:	f000 fc67 	bl	8003524 <_vfiprintf_r>
 8002c56:	b002      	add	sp, #8
 8002c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c5c:	b004      	add	sp, #16
 8002c5e:	4770      	bx	lr
 8002c60:	2000000c 	.word	0x2000000c

08002c64 <_puts_r>:
 8002c64:	b570      	push	{r4, r5, r6, lr}
 8002c66:	460e      	mov	r6, r1
 8002c68:	4605      	mov	r5, r0
 8002c6a:	b118      	cbz	r0, 8002c74 <_puts_r+0x10>
 8002c6c:	6983      	ldr	r3, [r0, #24]
 8002c6e:	b90b      	cbnz	r3, 8002c74 <_puts_r+0x10>
 8002c70:	f000 fa48 	bl	8003104 <__sinit>
 8002c74:	69ab      	ldr	r3, [r5, #24]
 8002c76:	68ac      	ldr	r4, [r5, #8]
 8002c78:	b913      	cbnz	r3, 8002c80 <_puts_r+0x1c>
 8002c7a:	4628      	mov	r0, r5
 8002c7c:	f000 fa42 	bl	8003104 <__sinit>
 8002c80:	4b2c      	ldr	r3, [pc, #176]	; (8002d34 <_puts_r+0xd0>)
 8002c82:	429c      	cmp	r4, r3
 8002c84:	d120      	bne.n	8002cc8 <_puts_r+0x64>
 8002c86:	686c      	ldr	r4, [r5, #4]
 8002c88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002c8a:	07db      	lsls	r3, r3, #31
 8002c8c:	d405      	bmi.n	8002c9a <_puts_r+0x36>
 8002c8e:	89a3      	ldrh	r3, [r4, #12]
 8002c90:	0598      	lsls	r0, r3, #22
 8002c92:	d402      	bmi.n	8002c9a <_puts_r+0x36>
 8002c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002c96:	f000 fad3 	bl	8003240 <__retarget_lock_acquire_recursive>
 8002c9a:	89a3      	ldrh	r3, [r4, #12]
 8002c9c:	0719      	lsls	r1, r3, #28
 8002c9e:	d51d      	bpl.n	8002cdc <_puts_r+0x78>
 8002ca0:	6923      	ldr	r3, [r4, #16]
 8002ca2:	b1db      	cbz	r3, 8002cdc <_puts_r+0x78>
 8002ca4:	3e01      	subs	r6, #1
 8002ca6:	68a3      	ldr	r3, [r4, #8]
 8002ca8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002cac:	3b01      	subs	r3, #1
 8002cae:	60a3      	str	r3, [r4, #8]
 8002cb0:	bb39      	cbnz	r1, 8002d02 <_puts_r+0x9e>
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	da38      	bge.n	8002d28 <_puts_r+0xc4>
 8002cb6:	4622      	mov	r2, r4
 8002cb8:	210a      	movs	r1, #10
 8002cba:	4628      	mov	r0, r5
 8002cbc:	f000 f848 	bl	8002d50 <__swbuf_r>
 8002cc0:	3001      	adds	r0, #1
 8002cc2:	d011      	beq.n	8002ce8 <_puts_r+0x84>
 8002cc4:	250a      	movs	r5, #10
 8002cc6:	e011      	b.n	8002cec <_puts_r+0x88>
 8002cc8:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <_puts_r+0xd4>)
 8002cca:	429c      	cmp	r4, r3
 8002ccc:	d101      	bne.n	8002cd2 <_puts_r+0x6e>
 8002cce:	68ac      	ldr	r4, [r5, #8]
 8002cd0:	e7da      	b.n	8002c88 <_puts_r+0x24>
 8002cd2:	4b1a      	ldr	r3, [pc, #104]	; (8002d3c <_puts_r+0xd8>)
 8002cd4:	429c      	cmp	r4, r3
 8002cd6:	bf08      	it	eq
 8002cd8:	68ec      	ldreq	r4, [r5, #12]
 8002cda:	e7d5      	b.n	8002c88 <_puts_r+0x24>
 8002cdc:	4621      	mov	r1, r4
 8002cde:	4628      	mov	r0, r5
 8002ce0:	f000 f888 	bl	8002df4 <__swsetup_r>
 8002ce4:	2800      	cmp	r0, #0
 8002ce6:	d0dd      	beq.n	8002ca4 <_puts_r+0x40>
 8002ce8:	f04f 35ff 	mov.w	r5, #4294967295
 8002cec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002cee:	07da      	lsls	r2, r3, #31
 8002cf0:	d405      	bmi.n	8002cfe <_puts_r+0x9a>
 8002cf2:	89a3      	ldrh	r3, [r4, #12]
 8002cf4:	059b      	lsls	r3, r3, #22
 8002cf6:	d402      	bmi.n	8002cfe <_puts_r+0x9a>
 8002cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cfa:	f000 faa2 	bl	8003242 <__retarget_lock_release_recursive>
 8002cfe:	4628      	mov	r0, r5
 8002d00:	bd70      	pop	{r4, r5, r6, pc}
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	da04      	bge.n	8002d10 <_puts_r+0xac>
 8002d06:	69a2      	ldr	r2, [r4, #24]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	dc06      	bgt.n	8002d1a <_puts_r+0xb6>
 8002d0c:	290a      	cmp	r1, #10
 8002d0e:	d004      	beq.n	8002d1a <_puts_r+0xb6>
 8002d10:	6823      	ldr	r3, [r4, #0]
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	6022      	str	r2, [r4, #0]
 8002d16:	7019      	strb	r1, [r3, #0]
 8002d18:	e7c5      	b.n	8002ca6 <_puts_r+0x42>
 8002d1a:	4622      	mov	r2, r4
 8002d1c:	4628      	mov	r0, r5
 8002d1e:	f000 f817 	bl	8002d50 <__swbuf_r>
 8002d22:	3001      	adds	r0, #1
 8002d24:	d1bf      	bne.n	8002ca6 <_puts_r+0x42>
 8002d26:	e7df      	b.n	8002ce8 <_puts_r+0x84>
 8002d28:	6823      	ldr	r3, [r4, #0]
 8002d2a:	250a      	movs	r5, #10
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	6022      	str	r2, [r4, #0]
 8002d30:	701d      	strb	r5, [r3, #0]
 8002d32:	e7db      	b.n	8002cec <_puts_r+0x88>
 8002d34:	08003da0 	.word	0x08003da0
 8002d38:	08003dc0 	.word	0x08003dc0
 8002d3c:	08003d80 	.word	0x08003d80

08002d40 <puts>:
 8002d40:	4b02      	ldr	r3, [pc, #8]	; (8002d4c <puts+0xc>)
 8002d42:	4601      	mov	r1, r0
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	f7ff bf8d 	b.w	8002c64 <_puts_r>
 8002d4a:	bf00      	nop
 8002d4c:	2000000c 	.word	0x2000000c

08002d50 <__swbuf_r>:
 8002d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d52:	460e      	mov	r6, r1
 8002d54:	4614      	mov	r4, r2
 8002d56:	4605      	mov	r5, r0
 8002d58:	b118      	cbz	r0, 8002d62 <__swbuf_r+0x12>
 8002d5a:	6983      	ldr	r3, [r0, #24]
 8002d5c:	b90b      	cbnz	r3, 8002d62 <__swbuf_r+0x12>
 8002d5e:	f000 f9d1 	bl	8003104 <__sinit>
 8002d62:	4b21      	ldr	r3, [pc, #132]	; (8002de8 <__swbuf_r+0x98>)
 8002d64:	429c      	cmp	r4, r3
 8002d66:	d12b      	bne.n	8002dc0 <__swbuf_r+0x70>
 8002d68:	686c      	ldr	r4, [r5, #4]
 8002d6a:	69a3      	ldr	r3, [r4, #24]
 8002d6c:	60a3      	str	r3, [r4, #8]
 8002d6e:	89a3      	ldrh	r3, [r4, #12]
 8002d70:	071a      	lsls	r2, r3, #28
 8002d72:	d52f      	bpl.n	8002dd4 <__swbuf_r+0x84>
 8002d74:	6923      	ldr	r3, [r4, #16]
 8002d76:	b36b      	cbz	r3, 8002dd4 <__swbuf_r+0x84>
 8002d78:	6923      	ldr	r3, [r4, #16]
 8002d7a:	6820      	ldr	r0, [r4, #0]
 8002d7c:	1ac0      	subs	r0, r0, r3
 8002d7e:	6963      	ldr	r3, [r4, #20]
 8002d80:	b2f6      	uxtb	r6, r6
 8002d82:	4283      	cmp	r3, r0
 8002d84:	4637      	mov	r7, r6
 8002d86:	dc04      	bgt.n	8002d92 <__swbuf_r+0x42>
 8002d88:	4621      	mov	r1, r4
 8002d8a:	4628      	mov	r0, r5
 8002d8c:	f000 f926 	bl	8002fdc <_fflush_r>
 8002d90:	bb30      	cbnz	r0, 8002de0 <__swbuf_r+0x90>
 8002d92:	68a3      	ldr	r3, [r4, #8]
 8002d94:	3b01      	subs	r3, #1
 8002d96:	60a3      	str	r3, [r4, #8]
 8002d98:	6823      	ldr	r3, [r4, #0]
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	6022      	str	r2, [r4, #0]
 8002d9e:	701e      	strb	r6, [r3, #0]
 8002da0:	6963      	ldr	r3, [r4, #20]
 8002da2:	3001      	adds	r0, #1
 8002da4:	4283      	cmp	r3, r0
 8002da6:	d004      	beq.n	8002db2 <__swbuf_r+0x62>
 8002da8:	89a3      	ldrh	r3, [r4, #12]
 8002daa:	07db      	lsls	r3, r3, #31
 8002dac:	d506      	bpl.n	8002dbc <__swbuf_r+0x6c>
 8002dae:	2e0a      	cmp	r6, #10
 8002db0:	d104      	bne.n	8002dbc <__swbuf_r+0x6c>
 8002db2:	4621      	mov	r1, r4
 8002db4:	4628      	mov	r0, r5
 8002db6:	f000 f911 	bl	8002fdc <_fflush_r>
 8002dba:	b988      	cbnz	r0, 8002de0 <__swbuf_r+0x90>
 8002dbc:	4638      	mov	r0, r7
 8002dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dc0:	4b0a      	ldr	r3, [pc, #40]	; (8002dec <__swbuf_r+0x9c>)
 8002dc2:	429c      	cmp	r4, r3
 8002dc4:	d101      	bne.n	8002dca <__swbuf_r+0x7a>
 8002dc6:	68ac      	ldr	r4, [r5, #8]
 8002dc8:	e7cf      	b.n	8002d6a <__swbuf_r+0x1a>
 8002dca:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <__swbuf_r+0xa0>)
 8002dcc:	429c      	cmp	r4, r3
 8002dce:	bf08      	it	eq
 8002dd0:	68ec      	ldreq	r4, [r5, #12]
 8002dd2:	e7ca      	b.n	8002d6a <__swbuf_r+0x1a>
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	4628      	mov	r0, r5
 8002dd8:	f000 f80c 	bl	8002df4 <__swsetup_r>
 8002ddc:	2800      	cmp	r0, #0
 8002dde:	d0cb      	beq.n	8002d78 <__swbuf_r+0x28>
 8002de0:	f04f 37ff 	mov.w	r7, #4294967295
 8002de4:	e7ea      	b.n	8002dbc <__swbuf_r+0x6c>
 8002de6:	bf00      	nop
 8002de8:	08003da0 	.word	0x08003da0
 8002dec:	08003dc0 	.word	0x08003dc0
 8002df0:	08003d80 	.word	0x08003d80

08002df4 <__swsetup_r>:
 8002df4:	4b32      	ldr	r3, [pc, #200]	; (8002ec0 <__swsetup_r+0xcc>)
 8002df6:	b570      	push	{r4, r5, r6, lr}
 8002df8:	681d      	ldr	r5, [r3, #0]
 8002dfa:	4606      	mov	r6, r0
 8002dfc:	460c      	mov	r4, r1
 8002dfe:	b125      	cbz	r5, 8002e0a <__swsetup_r+0x16>
 8002e00:	69ab      	ldr	r3, [r5, #24]
 8002e02:	b913      	cbnz	r3, 8002e0a <__swsetup_r+0x16>
 8002e04:	4628      	mov	r0, r5
 8002e06:	f000 f97d 	bl	8003104 <__sinit>
 8002e0a:	4b2e      	ldr	r3, [pc, #184]	; (8002ec4 <__swsetup_r+0xd0>)
 8002e0c:	429c      	cmp	r4, r3
 8002e0e:	d10f      	bne.n	8002e30 <__swsetup_r+0x3c>
 8002e10:	686c      	ldr	r4, [r5, #4]
 8002e12:	89a3      	ldrh	r3, [r4, #12]
 8002e14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e18:	0719      	lsls	r1, r3, #28
 8002e1a:	d42c      	bmi.n	8002e76 <__swsetup_r+0x82>
 8002e1c:	06dd      	lsls	r5, r3, #27
 8002e1e:	d411      	bmi.n	8002e44 <__swsetup_r+0x50>
 8002e20:	2309      	movs	r3, #9
 8002e22:	6033      	str	r3, [r6, #0]
 8002e24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002e28:	81a3      	strh	r3, [r4, #12]
 8002e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8002e2e:	e03e      	b.n	8002eae <__swsetup_r+0xba>
 8002e30:	4b25      	ldr	r3, [pc, #148]	; (8002ec8 <__swsetup_r+0xd4>)
 8002e32:	429c      	cmp	r4, r3
 8002e34:	d101      	bne.n	8002e3a <__swsetup_r+0x46>
 8002e36:	68ac      	ldr	r4, [r5, #8]
 8002e38:	e7eb      	b.n	8002e12 <__swsetup_r+0x1e>
 8002e3a:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <__swsetup_r+0xd8>)
 8002e3c:	429c      	cmp	r4, r3
 8002e3e:	bf08      	it	eq
 8002e40:	68ec      	ldreq	r4, [r5, #12]
 8002e42:	e7e6      	b.n	8002e12 <__swsetup_r+0x1e>
 8002e44:	0758      	lsls	r0, r3, #29
 8002e46:	d512      	bpl.n	8002e6e <__swsetup_r+0x7a>
 8002e48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e4a:	b141      	cbz	r1, 8002e5e <__swsetup_r+0x6a>
 8002e4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e50:	4299      	cmp	r1, r3
 8002e52:	d002      	beq.n	8002e5a <__swsetup_r+0x66>
 8002e54:	4630      	mov	r0, r6
 8002e56:	f000 fa5b 	bl	8003310 <_free_r>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	6363      	str	r3, [r4, #52]	; 0x34
 8002e5e:	89a3      	ldrh	r3, [r4, #12]
 8002e60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e64:	81a3      	strh	r3, [r4, #12]
 8002e66:	2300      	movs	r3, #0
 8002e68:	6063      	str	r3, [r4, #4]
 8002e6a:	6923      	ldr	r3, [r4, #16]
 8002e6c:	6023      	str	r3, [r4, #0]
 8002e6e:	89a3      	ldrh	r3, [r4, #12]
 8002e70:	f043 0308 	orr.w	r3, r3, #8
 8002e74:	81a3      	strh	r3, [r4, #12]
 8002e76:	6923      	ldr	r3, [r4, #16]
 8002e78:	b94b      	cbnz	r3, 8002e8e <__swsetup_r+0x9a>
 8002e7a:	89a3      	ldrh	r3, [r4, #12]
 8002e7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e84:	d003      	beq.n	8002e8e <__swsetup_r+0x9a>
 8002e86:	4621      	mov	r1, r4
 8002e88:	4630      	mov	r0, r6
 8002e8a:	f000 fa01 	bl	8003290 <__smakebuf_r>
 8002e8e:	89a0      	ldrh	r0, [r4, #12]
 8002e90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e94:	f010 0301 	ands.w	r3, r0, #1
 8002e98:	d00a      	beq.n	8002eb0 <__swsetup_r+0xbc>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60a3      	str	r3, [r4, #8]
 8002e9e:	6963      	ldr	r3, [r4, #20]
 8002ea0:	425b      	negs	r3, r3
 8002ea2:	61a3      	str	r3, [r4, #24]
 8002ea4:	6923      	ldr	r3, [r4, #16]
 8002ea6:	b943      	cbnz	r3, 8002eba <__swsetup_r+0xc6>
 8002ea8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002eac:	d1ba      	bne.n	8002e24 <__swsetup_r+0x30>
 8002eae:	bd70      	pop	{r4, r5, r6, pc}
 8002eb0:	0781      	lsls	r1, r0, #30
 8002eb2:	bf58      	it	pl
 8002eb4:	6963      	ldrpl	r3, [r4, #20]
 8002eb6:	60a3      	str	r3, [r4, #8]
 8002eb8:	e7f4      	b.n	8002ea4 <__swsetup_r+0xb0>
 8002eba:	2000      	movs	r0, #0
 8002ebc:	e7f7      	b.n	8002eae <__swsetup_r+0xba>
 8002ebe:	bf00      	nop
 8002ec0:	2000000c 	.word	0x2000000c
 8002ec4:	08003da0 	.word	0x08003da0
 8002ec8:	08003dc0 	.word	0x08003dc0
 8002ecc:	08003d80 	.word	0x08003d80

08002ed0 <__sflush_r>:
 8002ed0:	898a      	ldrh	r2, [r1, #12]
 8002ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ed6:	4605      	mov	r5, r0
 8002ed8:	0710      	lsls	r0, r2, #28
 8002eda:	460c      	mov	r4, r1
 8002edc:	d458      	bmi.n	8002f90 <__sflush_r+0xc0>
 8002ede:	684b      	ldr	r3, [r1, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	dc05      	bgt.n	8002ef0 <__sflush_r+0x20>
 8002ee4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	dc02      	bgt.n	8002ef0 <__sflush_r+0x20>
 8002eea:	2000      	movs	r0, #0
 8002eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ef0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ef2:	2e00      	cmp	r6, #0
 8002ef4:	d0f9      	beq.n	8002eea <__sflush_r+0x1a>
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002efc:	682f      	ldr	r7, [r5, #0]
 8002efe:	602b      	str	r3, [r5, #0]
 8002f00:	d032      	beq.n	8002f68 <__sflush_r+0x98>
 8002f02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f04:	89a3      	ldrh	r3, [r4, #12]
 8002f06:	075a      	lsls	r2, r3, #29
 8002f08:	d505      	bpl.n	8002f16 <__sflush_r+0x46>
 8002f0a:	6863      	ldr	r3, [r4, #4]
 8002f0c:	1ac0      	subs	r0, r0, r3
 8002f0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f10:	b10b      	cbz	r3, 8002f16 <__sflush_r+0x46>
 8002f12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f14:	1ac0      	subs	r0, r0, r3
 8002f16:	2300      	movs	r3, #0
 8002f18:	4602      	mov	r2, r0
 8002f1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f1c:	6a21      	ldr	r1, [r4, #32]
 8002f1e:	4628      	mov	r0, r5
 8002f20:	47b0      	blx	r6
 8002f22:	1c43      	adds	r3, r0, #1
 8002f24:	89a3      	ldrh	r3, [r4, #12]
 8002f26:	d106      	bne.n	8002f36 <__sflush_r+0x66>
 8002f28:	6829      	ldr	r1, [r5, #0]
 8002f2a:	291d      	cmp	r1, #29
 8002f2c:	d82c      	bhi.n	8002f88 <__sflush_r+0xb8>
 8002f2e:	4a2a      	ldr	r2, [pc, #168]	; (8002fd8 <__sflush_r+0x108>)
 8002f30:	40ca      	lsrs	r2, r1
 8002f32:	07d6      	lsls	r6, r2, #31
 8002f34:	d528      	bpl.n	8002f88 <__sflush_r+0xb8>
 8002f36:	2200      	movs	r2, #0
 8002f38:	6062      	str	r2, [r4, #4]
 8002f3a:	04d9      	lsls	r1, r3, #19
 8002f3c:	6922      	ldr	r2, [r4, #16]
 8002f3e:	6022      	str	r2, [r4, #0]
 8002f40:	d504      	bpl.n	8002f4c <__sflush_r+0x7c>
 8002f42:	1c42      	adds	r2, r0, #1
 8002f44:	d101      	bne.n	8002f4a <__sflush_r+0x7a>
 8002f46:	682b      	ldr	r3, [r5, #0]
 8002f48:	b903      	cbnz	r3, 8002f4c <__sflush_r+0x7c>
 8002f4a:	6560      	str	r0, [r4, #84]	; 0x54
 8002f4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f4e:	602f      	str	r7, [r5, #0]
 8002f50:	2900      	cmp	r1, #0
 8002f52:	d0ca      	beq.n	8002eea <__sflush_r+0x1a>
 8002f54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f58:	4299      	cmp	r1, r3
 8002f5a:	d002      	beq.n	8002f62 <__sflush_r+0x92>
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	f000 f9d7 	bl	8003310 <_free_r>
 8002f62:	2000      	movs	r0, #0
 8002f64:	6360      	str	r0, [r4, #52]	; 0x34
 8002f66:	e7c1      	b.n	8002eec <__sflush_r+0x1c>
 8002f68:	6a21      	ldr	r1, [r4, #32]
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	4628      	mov	r0, r5
 8002f6e:	47b0      	blx	r6
 8002f70:	1c41      	adds	r1, r0, #1
 8002f72:	d1c7      	bne.n	8002f04 <__sflush_r+0x34>
 8002f74:	682b      	ldr	r3, [r5, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0c4      	beq.n	8002f04 <__sflush_r+0x34>
 8002f7a:	2b1d      	cmp	r3, #29
 8002f7c:	d001      	beq.n	8002f82 <__sflush_r+0xb2>
 8002f7e:	2b16      	cmp	r3, #22
 8002f80:	d101      	bne.n	8002f86 <__sflush_r+0xb6>
 8002f82:	602f      	str	r7, [r5, #0]
 8002f84:	e7b1      	b.n	8002eea <__sflush_r+0x1a>
 8002f86:	89a3      	ldrh	r3, [r4, #12]
 8002f88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f8c:	81a3      	strh	r3, [r4, #12]
 8002f8e:	e7ad      	b.n	8002eec <__sflush_r+0x1c>
 8002f90:	690f      	ldr	r7, [r1, #16]
 8002f92:	2f00      	cmp	r7, #0
 8002f94:	d0a9      	beq.n	8002eea <__sflush_r+0x1a>
 8002f96:	0793      	lsls	r3, r2, #30
 8002f98:	680e      	ldr	r6, [r1, #0]
 8002f9a:	bf08      	it	eq
 8002f9c:	694b      	ldreq	r3, [r1, #20]
 8002f9e:	600f      	str	r7, [r1, #0]
 8002fa0:	bf18      	it	ne
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	eba6 0807 	sub.w	r8, r6, r7
 8002fa8:	608b      	str	r3, [r1, #8]
 8002faa:	f1b8 0f00 	cmp.w	r8, #0
 8002fae:	dd9c      	ble.n	8002eea <__sflush_r+0x1a>
 8002fb0:	6a21      	ldr	r1, [r4, #32]
 8002fb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002fb4:	4643      	mov	r3, r8
 8002fb6:	463a      	mov	r2, r7
 8002fb8:	4628      	mov	r0, r5
 8002fba:	47b0      	blx	r6
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	dc06      	bgt.n	8002fce <__sflush_r+0xfe>
 8002fc0:	89a3      	ldrh	r3, [r4, #12]
 8002fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fc6:	81a3      	strh	r3, [r4, #12]
 8002fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fcc:	e78e      	b.n	8002eec <__sflush_r+0x1c>
 8002fce:	4407      	add	r7, r0
 8002fd0:	eba8 0800 	sub.w	r8, r8, r0
 8002fd4:	e7e9      	b.n	8002faa <__sflush_r+0xda>
 8002fd6:	bf00      	nop
 8002fd8:	20400001 	.word	0x20400001

08002fdc <_fflush_r>:
 8002fdc:	b538      	push	{r3, r4, r5, lr}
 8002fde:	690b      	ldr	r3, [r1, #16]
 8002fe0:	4605      	mov	r5, r0
 8002fe2:	460c      	mov	r4, r1
 8002fe4:	b913      	cbnz	r3, 8002fec <_fflush_r+0x10>
 8002fe6:	2500      	movs	r5, #0
 8002fe8:	4628      	mov	r0, r5
 8002fea:	bd38      	pop	{r3, r4, r5, pc}
 8002fec:	b118      	cbz	r0, 8002ff6 <_fflush_r+0x1a>
 8002fee:	6983      	ldr	r3, [r0, #24]
 8002ff0:	b90b      	cbnz	r3, 8002ff6 <_fflush_r+0x1a>
 8002ff2:	f000 f887 	bl	8003104 <__sinit>
 8002ff6:	4b14      	ldr	r3, [pc, #80]	; (8003048 <_fflush_r+0x6c>)
 8002ff8:	429c      	cmp	r4, r3
 8002ffa:	d11b      	bne.n	8003034 <_fflush_r+0x58>
 8002ffc:	686c      	ldr	r4, [r5, #4]
 8002ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0ef      	beq.n	8002fe6 <_fflush_r+0xa>
 8003006:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003008:	07d0      	lsls	r0, r2, #31
 800300a:	d404      	bmi.n	8003016 <_fflush_r+0x3a>
 800300c:	0599      	lsls	r1, r3, #22
 800300e:	d402      	bmi.n	8003016 <_fflush_r+0x3a>
 8003010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003012:	f000 f915 	bl	8003240 <__retarget_lock_acquire_recursive>
 8003016:	4628      	mov	r0, r5
 8003018:	4621      	mov	r1, r4
 800301a:	f7ff ff59 	bl	8002ed0 <__sflush_r>
 800301e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003020:	07da      	lsls	r2, r3, #31
 8003022:	4605      	mov	r5, r0
 8003024:	d4e0      	bmi.n	8002fe8 <_fflush_r+0xc>
 8003026:	89a3      	ldrh	r3, [r4, #12]
 8003028:	059b      	lsls	r3, r3, #22
 800302a:	d4dd      	bmi.n	8002fe8 <_fflush_r+0xc>
 800302c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800302e:	f000 f908 	bl	8003242 <__retarget_lock_release_recursive>
 8003032:	e7d9      	b.n	8002fe8 <_fflush_r+0xc>
 8003034:	4b05      	ldr	r3, [pc, #20]	; (800304c <_fflush_r+0x70>)
 8003036:	429c      	cmp	r4, r3
 8003038:	d101      	bne.n	800303e <_fflush_r+0x62>
 800303a:	68ac      	ldr	r4, [r5, #8]
 800303c:	e7df      	b.n	8002ffe <_fflush_r+0x22>
 800303e:	4b04      	ldr	r3, [pc, #16]	; (8003050 <_fflush_r+0x74>)
 8003040:	429c      	cmp	r4, r3
 8003042:	bf08      	it	eq
 8003044:	68ec      	ldreq	r4, [r5, #12]
 8003046:	e7da      	b.n	8002ffe <_fflush_r+0x22>
 8003048:	08003da0 	.word	0x08003da0
 800304c:	08003dc0 	.word	0x08003dc0
 8003050:	08003d80 	.word	0x08003d80

08003054 <std>:
 8003054:	2300      	movs	r3, #0
 8003056:	b510      	push	{r4, lr}
 8003058:	4604      	mov	r4, r0
 800305a:	e9c0 3300 	strd	r3, r3, [r0]
 800305e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003062:	6083      	str	r3, [r0, #8]
 8003064:	8181      	strh	r1, [r0, #12]
 8003066:	6643      	str	r3, [r0, #100]	; 0x64
 8003068:	81c2      	strh	r2, [r0, #14]
 800306a:	6183      	str	r3, [r0, #24]
 800306c:	4619      	mov	r1, r3
 800306e:	2208      	movs	r2, #8
 8003070:	305c      	adds	r0, #92	; 0x5c
 8003072:	f7ff fdd7 	bl	8002c24 <memset>
 8003076:	4b05      	ldr	r3, [pc, #20]	; (800308c <std+0x38>)
 8003078:	6263      	str	r3, [r4, #36]	; 0x24
 800307a:	4b05      	ldr	r3, [pc, #20]	; (8003090 <std+0x3c>)
 800307c:	62a3      	str	r3, [r4, #40]	; 0x28
 800307e:	4b05      	ldr	r3, [pc, #20]	; (8003094 <std+0x40>)
 8003080:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003082:	4b05      	ldr	r3, [pc, #20]	; (8003098 <std+0x44>)
 8003084:	6224      	str	r4, [r4, #32]
 8003086:	6323      	str	r3, [r4, #48]	; 0x30
 8003088:	bd10      	pop	{r4, pc}
 800308a:	bf00      	nop
 800308c:	08003acd 	.word	0x08003acd
 8003090:	08003aef 	.word	0x08003aef
 8003094:	08003b27 	.word	0x08003b27
 8003098:	08003b4b 	.word	0x08003b4b

0800309c <_cleanup_r>:
 800309c:	4901      	ldr	r1, [pc, #4]	; (80030a4 <_cleanup_r+0x8>)
 800309e:	f000 b8af 	b.w	8003200 <_fwalk_reent>
 80030a2:	bf00      	nop
 80030a4:	08002fdd 	.word	0x08002fdd

080030a8 <__sfmoreglue>:
 80030a8:	b570      	push	{r4, r5, r6, lr}
 80030aa:	2268      	movs	r2, #104	; 0x68
 80030ac:	1e4d      	subs	r5, r1, #1
 80030ae:	4355      	muls	r5, r2
 80030b0:	460e      	mov	r6, r1
 80030b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80030b6:	f000 f997 	bl	80033e8 <_malloc_r>
 80030ba:	4604      	mov	r4, r0
 80030bc:	b140      	cbz	r0, 80030d0 <__sfmoreglue+0x28>
 80030be:	2100      	movs	r1, #0
 80030c0:	e9c0 1600 	strd	r1, r6, [r0]
 80030c4:	300c      	adds	r0, #12
 80030c6:	60a0      	str	r0, [r4, #8]
 80030c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80030cc:	f7ff fdaa 	bl	8002c24 <memset>
 80030d0:	4620      	mov	r0, r4
 80030d2:	bd70      	pop	{r4, r5, r6, pc}

080030d4 <__sfp_lock_acquire>:
 80030d4:	4801      	ldr	r0, [pc, #4]	; (80030dc <__sfp_lock_acquire+0x8>)
 80030d6:	f000 b8b3 	b.w	8003240 <__retarget_lock_acquire_recursive>
 80030da:	bf00      	nop
 80030dc:	2000010d 	.word	0x2000010d

080030e0 <__sfp_lock_release>:
 80030e0:	4801      	ldr	r0, [pc, #4]	; (80030e8 <__sfp_lock_release+0x8>)
 80030e2:	f000 b8ae 	b.w	8003242 <__retarget_lock_release_recursive>
 80030e6:	bf00      	nop
 80030e8:	2000010d 	.word	0x2000010d

080030ec <__sinit_lock_acquire>:
 80030ec:	4801      	ldr	r0, [pc, #4]	; (80030f4 <__sinit_lock_acquire+0x8>)
 80030ee:	f000 b8a7 	b.w	8003240 <__retarget_lock_acquire_recursive>
 80030f2:	bf00      	nop
 80030f4:	2000010e 	.word	0x2000010e

080030f8 <__sinit_lock_release>:
 80030f8:	4801      	ldr	r0, [pc, #4]	; (8003100 <__sinit_lock_release+0x8>)
 80030fa:	f000 b8a2 	b.w	8003242 <__retarget_lock_release_recursive>
 80030fe:	bf00      	nop
 8003100:	2000010e 	.word	0x2000010e

08003104 <__sinit>:
 8003104:	b510      	push	{r4, lr}
 8003106:	4604      	mov	r4, r0
 8003108:	f7ff fff0 	bl	80030ec <__sinit_lock_acquire>
 800310c:	69a3      	ldr	r3, [r4, #24]
 800310e:	b11b      	cbz	r3, 8003118 <__sinit+0x14>
 8003110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003114:	f7ff bff0 	b.w	80030f8 <__sinit_lock_release>
 8003118:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800311c:	6523      	str	r3, [r4, #80]	; 0x50
 800311e:	4b13      	ldr	r3, [pc, #76]	; (800316c <__sinit+0x68>)
 8003120:	4a13      	ldr	r2, [pc, #76]	; (8003170 <__sinit+0x6c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	62a2      	str	r2, [r4, #40]	; 0x28
 8003126:	42a3      	cmp	r3, r4
 8003128:	bf04      	itt	eq
 800312a:	2301      	moveq	r3, #1
 800312c:	61a3      	streq	r3, [r4, #24]
 800312e:	4620      	mov	r0, r4
 8003130:	f000 f820 	bl	8003174 <__sfp>
 8003134:	6060      	str	r0, [r4, #4]
 8003136:	4620      	mov	r0, r4
 8003138:	f000 f81c 	bl	8003174 <__sfp>
 800313c:	60a0      	str	r0, [r4, #8]
 800313e:	4620      	mov	r0, r4
 8003140:	f000 f818 	bl	8003174 <__sfp>
 8003144:	2200      	movs	r2, #0
 8003146:	60e0      	str	r0, [r4, #12]
 8003148:	2104      	movs	r1, #4
 800314a:	6860      	ldr	r0, [r4, #4]
 800314c:	f7ff ff82 	bl	8003054 <std>
 8003150:	68a0      	ldr	r0, [r4, #8]
 8003152:	2201      	movs	r2, #1
 8003154:	2109      	movs	r1, #9
 8003156:	f7ff ff7d 	bl	8003054 <std>
 800315a:	68e0      	ldr	r0, [r4, #12]
 800315c:	2202      	movs	r2, #2
 800315e:	2112      	movs	r1, #18
 8003160:	f7ff ff78 	bl	8003054 <std>
 8003164:	2301      	movs	r3, #1
 8003166:	61a3      	str	r3, [r4, #24]
 8003168:	e7d2      	b.n	8003110 <__sinit+0xc>
 800316a:	bf00      	nop
 800316c:	08003d7c 	.word	0x08003d7c
 8003170:	0800309d 	.word	0x0800309d

08003174 <__sfp>:
 8003174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003176:	4607      	mov	r7, r0
 8003178:	f7ff ffac 	bl	80030d4 <__sfp_lock_acquire>
 800317c:	4b1e      	ldr	r3, [pc, #120]	; (80031f8 <__sfp+0x84>)
 800317e:	681e      	ldr	r6, [r3, #0]
 8003180:	69b3      	ldr	r3, [r6, #24]
 8003182:	b913      	cbnz	r3, 800318a <__sfp+0x16>
 8003184:	4630      	mov	r0, r6
 8003186:	f7ff ffbd 	bl	8003104 <__sinit>
 800318a:	3648      	adds	r6, #72	; 0x48
 800318c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003190:	3b01      	subs	r3, #1
 8003192:	d503      	bpl.n	800319c <__sfp+0x28>
 8003194:	6833      	ldr	r3, [r6, #0]
 8003196:	b30b      	cbz	r3, 80031dc <__sfp+0x68>
 8003198:	6836      	ldr	r6, [r6, #0]
 800319a:	e7f7      	b.n	800318c <__sfp+0x18>
 800319c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80031a0:	b9d5      	cbnz	r5, 80031d8 <__sfp+0x64>
 80031a2:	4b16      	ldr	r3, [pc, #88]	; (80031fc <__sfp+0x88>)
 80031a4:	60e3      	str	r3, [r4, #12]
 80031a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80031aa:	6665      	str	r5, [r4, #100]	; 0x64
 80031ac:	f000 f847 	bl	800323e <__retarget_lock_init_recursive>
 80031b0:	f7ff ff96 	bl	80030e0 <__sfp_lock_release>
 80031b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80031b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80031bc:	6025      	str	r5, [r4, #0]
 80031be:	61a5      	str	r5, [r4, #24]
 80031c0:	2208      	movs	r2, #8
 80031c2:	4629      	mov	r1, r5
 80031c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80031c8:	f7ff fd2c 	bl	8002c24 <memset>
 80031cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80031d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80031d4:	4620      	mov	r0, r4
 80031d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031d8:	3468      	adds	r4, #104	; 0x68
 80031da:	e7d9      	b.n	8003190 <__sfp+0x1c>
 80031dc:	2104      	movs	r1, #4
 80031de:	4638      	mov	r0, r7
 80031e0:	f7ff ff62 	bl	80030a8 <__sfmoreglue>
 80031e4:	4604      	mov	r4, r0
 80031e6:	6030      	str	r0, [r6, #0]
 80031e8:	2800      	cmp	r0, #0
 80031ea:	d1d5      	bne.n	8003198 <__sfp+0x24>
 80031ec:	f7ff ff78 	bl	80030e0 <__sfp_lock_release>
 80031f0:	230c      	movs	r3, #12
 80031f2:	603b      	str	r3, [r7, #0]
 80031f4:	e7ee      	b.n	80031d4 <__sfp+0x60>
 80031f6:	bf00      	nop
 80031f8:	08003d7c 	.word	0x08003d7c
 80031fc:	ffff0001 	.word	0xffff0001

08003200 <_fwalk_reent>:
 8003200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003204:	4606      	mov	r6, r0
 8003206:	4688      	mov	r8, r1
 8003208:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800320c:	2700      	movs	r7, #0
 800320e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003212:	f1b9 0901 	subs.w	r9, r9, #1
 8003216:	d505      	bpl.n	8003224 <_fwalk_reent+0x24>
 8003218:	6824      	ldr	r4, [r4, #0]
 800321a:	2c00      	cmp	r4, #0
 800321c:	d1f7      	bne.n	800320e <_fwalk_reent+0xe>
 800321e:	4638      	mov	r0, r7
 8003220:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003224:	89ab      	ldrh	r3, [r5, #12]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d907      	bls.n	800323a <_fwalk_reent+0x3a>
 800322a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800322e:	3301      	adds	r3, #1
 8003230:	d003      	beq.n	800323a <_fwalk_reent+0x3a>
 8003232:	4629      	mov	r1, r5
 8003234:	4630      	mov	r0, r6
 8003236:	47c0      	blx	r8
 8003238:	4307      	orrs	r7, r0
 800323a:	3568      	adds	r5, #104	; 0x68
 800323c:	e7e9      	b.n	8003212 <_fwalk_reent+0x12>

0800323e <__retarget_lock_init_recursive>:
 800323e:	4770      	bx	lr

08003240 <__retarget_lock_acquire_recursive>:
 8003240:	4770      	bx	lr

08003242 <__retarget_lock_release_recursive>:
 8003242:	4770      	bx	lr

08003244 <__swhatbuf_r>:
 8003244:	b570      	push	{r4, r5, r6, lr}
 8003246:	460e      	mov	r6, r1
 8003248:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800324c:	2900      	cmp	r1, #0
 800324e:	b096      	sub	sp, #88	; 0x58
 8003250:	4614      	mov	r4, r2
 8003252:	461d      	mov	r5, r3
 8003254:	da08      	bge.n	8003268 <__swhatbuf_r+0x24>
 8003256:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	602a      	str	r2, [r5, #0]
 800325e:	061a      	lsls	r2, r3, #24
 8003260:	d410      	bmi.n	8003284 <__swhatbuf_r+0x40>
 8003262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003266:	e00e      	b.n	8003286 <__swhatbuf_r+0x42>
 8003268:	466a      	mov	r2, sp
 800326a:	f000 fc95 	bl	8003b98 <_fstat_r>
 800326e:	2800      	cmp	r0, #0
 8003270:	dbf1      	blt.n	8003256 <__swhatbuf_r+0x12>
 8003272:	9a01      	ldr	r2, [sp, #4]
 8003274:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003278:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800327c:	425a      	negs	r2, r3
 800327e:	415a      	adcs	r2, r3
 8003280:	602a      	str	r2, [r5, #0]
 8003282:	e7ee      	b.n	8003262 <__swhatbuf_r+0x1e>
 8003284:	2340      	movs	r3, #64	; 0x40
 8003286:	2000      	movs	r0, #0
 8003288:	6023      	str	r3, [r4, #0]
 800328a:	b016      	add	sp, #88	; 0x58
 800328c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003290 <__smakebuf_r>:
 8003290:	898b      	ldrh	r3, [r1, #12]
 8003292:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003294:	079d      	lsls	r5, r3, #30
 8003296:	4606      	mov	r6, r0
 8003298:	460c      	mov	r4, r1
 800329a:	d507      	bpl.n	80032ac <__smakebuf_r+0x1c>
 800329c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80032a0:	6023      	str	r3, [r4, #0]
 80032a2:	6123      	str	r3, [r4, #16]
 80032a4:	2301      	movs	r3, #1
 80032a6:	6163      	str	r3, [r4, #20]
 80032a8:	b002      	add	sp, #8
 80032aa:	bd70      	pop	{r4, r5, r6, pc}
 80032ac:	ab01      	add	r3, sp, #4
 80032ae:	466a      	mov	r2, sp
 80032b0:	f7ff ffc8 	bl	8003244 <__swhatbuf_r>
 80032b4:	9900      	ldr	r1, [sp, #0]
 80032b6:	4605      	mov	r5, r0
 80032b8:	4630      	mov	r0, r6
 80032ba:	f000 f895 	bl	80033e8 <_malloc_r>
 80032be:	b948      	cbnz	r0, 80032d4 <__smakebuf_r+0x44>
 80032c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032c4:	059a      	lsls	r2, r3, #22
 80032c6:	d4ef      	bmi.n	80032a8 <__smakebuf_r+0x18>
 80032c8:	f023 0303 	bic.w	r3, r3, #3
 80032cc:	f043 0302 	orr.w	r3, r3, #2
 80032d0:	81a3      	strh	r3, [r4, #12]
 80032d2:	e7e3      	b.n	800329c <__smakebuf_r+0xc>
 80032d4:	4b0d      	ldr	r3, [pc, #52]	; (800330c <__smakebuf_r+0x7c>)
 80032d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80032d8:	89a3      	ldrh	r3, [r4, #12]
 80032da:	6020      	str	r0, [r4, #0]
 80032dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e0:	81a3      	strh	r3, [r4, #12]
 80032e2:	9b00      	ldr	r3, [sp, #0]
 80032e4:	6163      	str	r3, [r4, #20]
 80032e6:	9b01      	ldr	r3, [sp, #4]
 80032e8:	6120      	str	r0, [r4, #16]
 80032ea:	b15b      	cbz	r3, 8003304 <__smakebuf_r+0x74>
 80032ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032f0:	4630      	mov	r0, r6
 80032f2:	f000 fc63 	bl	8003bbc <_isatty_r>
 80032f6:	b128      	cbz	r0, 8003304 <__smakebuf_r+0x74>
 80032f8:	89a3      	ldrh	r3, [r4, #12]
 80032fa:	f023 0303 	bic.w	r3, r3, #3
 80032fe:	f043 0301 	orr.w	r3, r3, #1
 8003302:	81a3      	strh	r3, [r4, #12]
 8003304:	89a0      	ldrh	r0, [r4, #12]
 8003306:	4305      	orrs	r5, r0
 8003308:	81a5      	strh	r5, [r4, #12]
 800330a:	e7cd      	b.n	80032a8 <__smakebuf_r+0x18>
 800330c:	0800309d 	.word	0x0800309d

08003310 <_free_r>:
 8003310:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003312:	2900      	cmp	r1, #0
 8003314:	d044      	beq.n	80033a0 <_free_r+0x90>
 8003316:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800331a:	9001      	str	r0, [sp, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	f1a1 0404 	sub.w	r4, r1, #4
 8003322:	bfb8      	it	lt
 8003324:	18e4      	addlt	r4, r4, r3
 8003326:	f000 fc6b 	bl	8003c00 <__malloc_lock>
 800332a:	4a1e      	ldr	r2, [pc, #120]	; (80033a4 <_free_r+0x94>)
 800332c:	9801      	ldr	r0, [sp, #4]
 800332e:	6813      	ldr	r3, [r2, #0]
 8003330:	b933      	cbnz	r3, 8003340 <_free_r+0x30>
 8003332:	6063      	str	r3, [r4, #4]
 8003334:	6014      	str	r4, [r2, #0]
 8003336:	b003      	add	sp, #12
 8003338:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800333c:	f000 bc66 	b.w	8003c0c <__malloc_unlock>
 8003340:	42a3      	cmp	r3, r4
 8003342:	d908      	bls.n	8003356 <_free_r+0x46>
 8003344:	6825      	ldr	r5, [r4, #0]
 8003346:	1961      	adds	r1, r4, r5
 8003348:	428b      	cmp	r3, r1
 800334a:	bf01      	itttt	eq
 800334c:	6819      	ldreq	r1, [r3, #0]
 800334e:	685b      	ldreq	r3, [r3, #4]
 8003350:	1949      	addeq	r1, r1, r5
 8003352:	6021      	streq	r1, [r4, #0]
 8003354:	e7ed      	b.n	8003332 <_free_r+0x22>
 8003356:	461a      	mov	r2, r3
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	b10b      	cbz	r3, 8003360 <_free_r+0x50>
 800335c:	42a3      	cmp	r3, r4
 800335e:	d9fa      	bls.n	8003356 <_free_r+0x46>
 8003360:	6811      	ldr	r1, [r2, #0]
 8003362:	1855      	adds	r5, r2, r1
 8003364:	42a5      	cmp	r5, r4
 8003366:	d10b      	bne.n	8003380 <_free_r+0x70>
 8003368:	6824      	ldr	r4, [r4, #0]
 800336a:	4421      	add	r1, r4
 800336c:	1854      	adds	r4, r2, r1
 800336e:	42a3      	cmp	r3, r4
 8003370:	6011      	str	r1, [r2, #0]
 8003372:	d1e0      	bne.n	8003336 <_free_r+0x26>
 8003374:	681c      	ldr	r4, [r3, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	6053      	str	r3, [r2, #4]
 800337a:	4421      	add	r1, r4
 800337c:	6011      	str	r1, [r2, #0]
 800337e:	e7da      	b.n	8003336 <_free_r+0x26>
 8003380:	d902      	bls.n	8003388 <_free_r+0x78>
 8003382:	230c      	movs	r3, #12
 8003384:	6003      	str	r3, [r0, #0]
 8003386:	e7d6      	b.n	8003336 <_free_r+0x26>
 8003388:	6825      	ldr	r5, [r4, #0]
 800338a:	1961      	adds	r1, r4, r5
 800338c:	428b      	cmp	r3, r1
 800338e:	bf04      	itt	eq
 8003390:	6819      	ldreq	r1, [r3, #0]
 8003392:	685b      	ldreq	r3, [r3, #4]
 8003394:	6063      	str	r3, [r4, #4]
 8003396:	bf04      	itt	eq
 8003398:	1949      	addeq	r1, r1, r5
 800339a:	6021      	streq	r1, [r4, #0]
 800339c:	6054      	str	r4, [r2, #4]
 800339e:	e7ca      	b.n	8003336 <_free_r+0x26>
 80033a0:	b003      	add	sp, #12
 80033a2:	bd30      	pop	{r4, r5, pc}
 80033a4:	20000110 	.word	0x20000110

080033a8 <sbrk_aligned>:
 80033a8:	b570      	push	{r4, r5, r6, lr}
 80033aa:	4e0e      	ldr	r6, [pc, #56]	; (80033e4 <sbrk_aligned+0x3c>)
 80033ac:	460c      	mov	r4, r1
 80033ae:	6831      	ldr	r1, [r6, #0]
 80033b0:	4605      	mov	r5, r0
 80033b2:	b911      	cbnz	r1, 80033ba <sbrk_aligned+0x12>
 80033b4:	f000 fb7a 	bl	8003aac <_sbrk_r>
 80033b8:	6030      	str	r0, [r6, #0]
 80033ba:	4621      	mov	r1, r4
 80033bc:	4628      	mov	r0, r5
 80033be:	f000 fb75 	bl	8003aac <_sbrk_r>
 80033c2:	1c43      	adds	r3, r0, #1
 80033c4:	d00a      	beq.n	80033dc <sbrk_aligned+0x34>
 80033c6:	1cc4      	adds	r4, r0, #3
 80033c8:	f024 0403 	bic.w	r4, r4, #3
 80033cc:	42a0      	cmp	r0, r4
 80033ce:	d007      	beq.n	80033e0 <sbrk_aligned+0x38>
 80033d0:	1a21      	subs	r1, r4, r0
 80033d2:	4628      	mov	r0, r5
 80033d4:	f000 fb6a 	bl	8003aac <_sbrk_r>
 80033d8:	3001      	adds	r0, #1
 80033da:	d101      	bne.n	80033e0 <sbrk_aligned+0x38>
 80033dc:	f04f 34ff 	mov.w	r4, #4294967295
 80033e0:	4620      	mov	r0, r4
 80033e2:	bd70      	pop	{r4, r5, r6, pc}
 80033e4:	20000114 	.word	0x20000114

080033e8 <_malloc_r>:
 80033e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033ec:	1ccd      	adds	r5, r1, #3
 80033ee:	f025 0503 	bic.w	r5, r5, #3
 80033f2:	3508      	adds	r5, #8
 80033f4:	2d0c      	cmp	r5, #12
 80033f6:	bf38      	it	cc
 80033f8:	250c      	movcc	r5, #12
 80033fa:	2d00      	cmp	r5, #0
 80033fc:	4607      	mov	r7, r0
 80033fe:	db01      	blt.n	8003404 <_malloc_r+0x1c>
 8003400:	42a9      	cmp	r1, r5
 8003402:	d905      	bls.n	8003410 <_malloc_r+0x28>
 8003404:	230c      	movs	r3, #12
 8003406:	603b      	str	r3, [r7, #0]
 8003408:	2600      	movs	r6, #0
 800340a:	4630      	mov	r0, r6
 800340c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003410:	4e2e      	ldr	r6, [pc, #184]	; (80034cc <_malloc_r+0xe4>)
 8003412:	f000 fbf5 	bl	8003c00 <__malloc_lock>
 8003416:	6833      	ldr	r3, [r6, #0]
 8003418:	461c      	mov	r4, r3
 800341a:	bb34      	cbnz	r4, 800346a <_malloc_r+0x82>
 800341c:	4629      	mov	r1, r5
 800341e:	4638      	mov	r0, r7
 8003420:	f7ff ffc2 	bl	80033a8 <sbrk_aligned>
 8003424:	1c43      	adds	r3, r0, #1
 8003426:	4604      	mov	r4, r0
 8003428:	d14d      	bne.n	80034c6 <_malloc_r+0xde>
 800342a:	6834      	ldr	r4, [r6, #0]
 800342c:	4626      	mov	r6, r4
 800342e:	2e00      	cmp	r6, #0
 8003430:	d140      	bne.n	80034b4 <_malloc_r+0xcc>
 8003432:	6823      	ldr	r3, [r4, #0]
 8003434:	4631      	mov	r1, r6
 8003436:	4638      	mov	r0, r7
 8003438:	eb04 0803 	add.w	r8, r4, r3
 800343c:	f000 fb36 	bl	8003aac <_sbrk_r>
 8003440:	4580      	cmp	r8, r0
 8003442:	d13a      	bne.n	80034ba <_malloc_r+0xd2>
 8003444:	6821      	ldr	r1, [r4, #0]
 8003446:	3503      	adds	r5, #3
 8003448:	1a6d      	subs	r5, r5, r1
 800344a:	f025 0503 	bic.w	r5, r5, #3
 800344e:	3508      	adds	r5, #8
 8003450:	2d0c      	cmp	r5, #12
 8003452:	bf38      	it	cc
 8003454:	250c      	movcc	r5, #12
 8003456:	4629      	mov	r1, r5
 8003458:	4638      	mov	r0, r7
 800345a:	f7ff ffa5 	bl	80033a8 <sbrk_aligned>
 800345e:	3001      	adds	r0, #1
 8003460:	d02b      	beq.n	80034ba <_malloc_r+0xd2>
 8003462:	6823      	ldr	r3, [r4, #0]
 8003464:	442b      	add	r3, r5
 8003466:	6023      	str	r3, [r4, #0]
 8003468:	e00e      	b.n	8003488 <_malloc_r+0xa0>
 800346a:	6822      	ldr	r2, [r4, #0]
 800346c:	1b52      	subs	r2, r2, r5
 800346e:	d41e      	bmi.n	80034ae <_malloc_r+0xc6>
 8003470:	2a0b      	cmp	r2, #11
 8003472:	d916      	bls.n	80034a2 <_malloc_r+0xba>
 8003474:	1961      	adds	r1, r4, r5
 8003476:	42a3      	cmp	r3, r4
 8003478:	6025      	str	r5, [r4, #0]
 800347a:	bf18      	it	ne
 800347c:	6059      	strne	r1, [r3, #4]
 800347e:	6863      	ldr	r3, [r4, #4]
 8003480:	bf08      	it	eq
 8003482:	6031      	streq	r1, [r6, #0]
 8003484:	5162      	str	r2, [r4, r5]
 8003486:	604b      	str	r3, [r1, #4]
 8003488:	4638      	mov	r0, r7
 800348a:	f104 060b 	add.w	r6, r4, #11
 800348e:	f000 fbbd 	bl	8003c0c <__malloc_unlock>
 8003492:	f026 0607 	bic.w	r6, r6, #7
 8003496:	1d23      	adds	r3, r4, #4
 8003498:	1af2      	subs	r2, r6, r3
 800349a:	d0b6      	beq.n	800340a <_malloc_r+0x22>
 800349c:	1b9b      	subs	r3, r3, r6
 800349e:	50a3      	str	r3, [r4, r2]
 80034a0:	e7b3      	b.n	800340a <_malloc_r+0x22>
 80034a2:	6862      	ldr	r2, [r4, #4]
 80034a4:	42a3      	cmp	r3, r4
 80034a6:	bf0c      	ite	eq
 80034a8:	6032      	streq	r2, [r6, #0]
 80034aa:	605a      	strne	r2, [r3, #4]
 80034ac:	e7ec      	b.n	8003488 <_malloc_r+0xa0>
 80034ae:	4623      	mov	r3, r4
 80034b0:	6864      	ldr	r4, [r4, #4]
 80034b2:	e7b2      	b.n	800341a <_malloc_r+0x32>
 80034b4:	4634      	mov	r4, r6
 80034b6:	6876      	ldr	r6, [r6, #4]
 80034b8:	e7b9      	b.n	800342e <_malloc_r+0x46>
 80034ba:	230c      	movs	r3, #12
 80034bc:	603b      	str	r3, [r7, #0]
 80034be:	4638      	mov	r0, r7
 80034c0:	f000 fba4 	bl	8003c0c <__malloc_unlock>
 80034c4:	e7a1      	b.n	800340a <_malloc_r+0x22>
 80034c6:	6025      	str	r5, [r4, #0]
 80034c8:	e7de      	b.n	8003488 <_malloc_r+0xa0>
 80034ca:	bf00      	nop
 80034cc:	20000110 	.word	0x20000110

080034d0 <__sfputc_r>:
 80034d0:	6893      	ldr	r3, [r2, #8]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	b410      	push	{r4}
 80034d8:	6093      	str	r3, [r2, #8]
 80034da:	da08      	bge.n	80034ee <__sfputc_r+0x1e>
 80034dc:	6994      	ldr	r4, [r2, #24]
 80034de:	42a3      	cmp	r3, r4
 80034e0:	db01      	blt.n	80034e6 <__sfputc_r+0x16>
 80034e2:	290a      	cmp	r1, #10
 80034e4:	d103      	bne.n	80034ee <__sfputc_r+0x1e>
 80034e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034ea:	f7ff bc31 	b.w	8002d50 <__swbuf_r>
 80034ee:	6813      	ldr	r3, [r2, #0]
 80034f0:	1c58      	adds	r0, r3, #1
 80034f2:	6010      	str	r0, [r2, #0]
 80034f4:	7019      	strb	r1, [r3, #0]
 80034f6:	4608      	mov	r0, r1
 80034f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <__sfputs_r>:
 80034fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003500:	4606      	mov	r6, r0
 8003502:	460f      	mov	r7, r1
 8003504:	4614      	mov	r4, r2
 8003506:	18d5      	adds	r5, r2, r3
 8003508:	42ac      	cmp	r4, r5
 800350a:	d101      	bne.n	8003510 <__sfputs_r+0x12>
 800350c:	2000      	movs	r0, #0
 800350e:	e007      	b.n	8003520 <__sfputs_r+0x22>
 8003510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003514:	463a      	mov	r2, r7
 8003516:	4630      	mov	r0, r6
 8003518:	f7ff ffda 	bl	80034d0 <__sfputc_r>
 800351c:	1c43      	adds	r3, r0, #1
 800351e:	d1f3      	bne.n	8003508 <__sfputs_r+0xa>
 8003520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003524 <_vfiprintf_r>:
 8003524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003528:	460d      	mov	r5, r1
 800352a:	b09d      	sub	sp, #116	; 0x74
 800352c:	4614      	mov	r4, r2
 800352e:	4698      	mov	r8, r3
 8003530:	4606      	mov	r6, r0
 8003532:	b118      	cbz	r0, 800353c <_vfiprintf_r+0x18>
 8003534:	6983      	ldr	r3, [r0, #24]
 8003536:	b90b      	cbnz	r3, 800353c <_vfiprintf_r+0x18>
 8003538:	f7ff fde4 	bl	8003104 <__sinit>
 800353c:	4b89      	ldr	r3, [pc, #548]	; (8003764 <_vfiprintf_r+0x240>)
 800353e:	429d      	cmp	r5, r3
 8003540:	d11b      	bne.n	800357a <_vfiprintf_r+0x56>
 8003542:	6875      	ldr	r5, [r6, #4]
 8003544:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003546:	07d9      	lsls	r1, r3, #31
 8003548:	d405      	bmi.n	8003556 <_vfiprintf_r+0x32>
 800354a:	89ab      	ldrh	r3, [r5, #12]
 800354c:	059a      	lsls	r2, r3, #22
 800354e:	d402      	bmi.n	8003556 <_vfiprintf_r+0x32>
 8003550:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003552:	f7ff fe75 	bl	8003240 <__retarget_lock_acquire_recursive>
 8003556:	89ab      	ldrh	r3, [r5, #12]
 8003558:	071b      	lsls	r3, r3, #28
 800355a:	d501      	bpl.n	8003560 <_vfiprintf_r+0x3c>
 800355c:	692b      	ldr	r3, [r5, #16]
 800355e:	b9eb      	cbnz	r3, 800359c <_vfiprintf_r+0x78>
 8003560:	4629      	mov	r1, r5
 8003562:	4630      	mov	r0, r6
 8003564:	f7ff fc46 	bl	8002df4 <__swsetup_r>
 8003568:	b1c0      	cbz	r0, 800359c <_vfiprintf_r+0x78>
 800356a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800356c:	07dc      	lsls	r4, r3, #31
 800356e:	d50e      	bpl.n	800358e <_vfiprintf_r+0x6a>
 8003570:	f04f 30ff 	mov.w	r0, #4294967295
 8003574:	b01d      	add	sp, #116	; 0x74
 8003576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800357a:	4b7b      	ldr	r3, [pc, #492]	; (8003768 <_vfiprintf_r+0x244>)
 800357c:	429d      	cmp	r5, r3
 800357e:	d101      	bne.n	8003584 <_vfiprintf_r+0x60>
 8003580:	68b5      	ldr	r5, [r6, #8]
 8003582:	e7df      	b.n	8003544 <_vfiprintf_r+0x20>
 8003584:	4b79      	ldr	r3, [pc, #484]	; (800376c <_vfiprintf_r+0x248>)
 8003586:	429d      	cmp	r5, r3
 8003588:	bf08      	it	eq
 800358a:	68f5      	ldreq	r5, [r6, #12]
 800358c:	e7da      	b.n	8003544 <_vfiprintf_r+0x20>
 800358e:	89ab      	ldrh	r3, [r5, #12]
 8003590:	0598      	lsls	r0, r3, #22
 8003592:	d4ed      	bmi.n	8003570 <_vfiprintf_r+0x4c>
 8003594:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003596:	f7ff fe54 	bl	8003242 <__retarget_lock_release_recursive>
 800359a:	e7e9      	b.n	8003570 <_vfiprintf_r+0x4c>
 800359c:	2300      	movs	r3, #0
 800359e:	9309      	str	r3, [sp, #36]	; 0x24
 80035a0:	2320      	movs	r3, #32
 80035a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80035aa:	2330      	movs	r3, #48	; 0x30
 80035ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003770 <_vfiprintf_r+0x24c>
 80035b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035b4:	f04f 0901 	mov.w	r9, #1
 80035b8:	4623      	mov	r3, r4
 80035ba:	469a      	mov	sl, r3
 80035bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035c0:	b10a      	cbz	r2, 80035c6 <_vfiprintf_r+0xa2>
 80035c2:	2a25      	cmp	r2, #37	; 0x25
 80035c4:	d1f9      	bne.n	80035ba <_vfiprintf_r+0x96>
 80035c6:	ebba 0b04 	subs.w	fp, sl, r4
 80035ca:	d00b      	beq.n	80035e4 <_vfiprintf_r+0xc0>
 80035cc:	465b      	mov	r3, fp
 80035ce:	4622      	mov	r2, r4
 80035d0:	4629      	mov	r1, r5
 80035d2:	4630      	mov	r0, r6
 80035d4:	f7ff ff93 	bl	80034fe <__sfputs_r>
 80035d8:	3001      	adds	r0, #1
 80035da:	f000 80aa 	beq.w	8003732 <_vfiprintf_r+0x20e>
 80035de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80035e0:	445a      	add	r2, fp
 80035e2:	9209      	str	r2, [sp, #36]	; 0x24
 80035e4:	f89a 3000 	ldrb.w	r3, [sl]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 80a2 	beq.w	8003732 <_vfiprintf_r+0x20e>
 80035ee:	2300      	movs	r3, #0
 80035f0:	f04f 32ff 	mov.w	r2, #4294967295
 80035f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80035f8:	f10a 0a01 	add.w	sl, sl, #1
 80035fc:	9304      	str	r3, [sp, #16]
 80035fe:	9307      	str	r3, [sp, #28]
 8003600:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003604:	931a      	str	r3, [sp, #104]	; 0x68
 8003606:	4654      	mov	r4, sl
 8003608:	2205      	movs	r2, #5
 800360a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800360e:	4858      	ldr	r0, [pc, #352]	; (8003770 <_vfiprintf_r+0x24c>)
 8003610:	f7fc fde6 	bl	80001e0 <memchr>
 8003614:	9a04      	ldr	r2, [sp, #16]
 8003616:	b9d8      	cbnz	r0, 8003650 <_vfiprintf_r+0x12c>
 8003618:	06d1      	lsls	r1, r2, #27
 800361a:	bf44      	itt	mi
 800361c:	2320      	movmi	r3, #32
 800361e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003622:	0713      	lsls	r3, r2, #28
 8003624:	bf44      	itt	mi
 8003626:	232b      	movmi	r3, #43	; 0x2b
 8003628:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800362c:	f89a 3000 	ldrb.w	r3, [sl]
 8003630:	2b2a      	cmp	r3, #42	; 0x2a
 8003632:	d015      	beq.n	8003660 <_vfiprintf_r+0x13c>
 8003634:	9a07      	ldr	r2, [sp, #28]
 8003636:	4654      	mov	r4, sl
 8003638:	2000      	movs	r0, #0
 800363a:	f04f 0c0a 	mov.w	ip, #10
 800363e:	4621      	mov	r1, r4
 8003640:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003644:	3b30      	subs	r3, #48	; 0x30
 8003646:	2b09      	cmp	r3, #9
 8003648:	d94e      	bls.n	80036e8 <_vfiprintf_r+0x1c4>
 800364a:	b1b0      	cbz	r0, 800367a <_vfiprintf_r+0x156>
 800364c:	9207      	str	r2, [sp, #28]
 800364e:	e014      	b.n	800367a <_vfiprintf_r+0x156>
 8003650:	eba0 0308 	sub.w	r3, r0, r8
 8003654:	fa09 f303 	lsl.w	r3, r9, r3
 8003658:	4313      	orrs	r3, r2
 800365a:	9304      	str	r3, [sp, #16]
 800365c:	46a2      	mov	sl, r4
 800365e:	e7d2      	b.n	8003606 <_vfiprintf_r+0xe2>
 8003660:	9b03      	ldr	r3, [sp, #12]
 8003662:	1d19      	adds	r1, r3, #4
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	9103      	str	r1, [sp, #12]
 8003668:	2b00      	cmp	r3, #0
 800366a:	bfbb      	ittet	lt
 800366c:	425b      	neglt	r3, r3
 800366e:	f042 0202 	orrlt.w	r2, r2, #2
 8003672:	9307      	strge	r3, [sp, #28]
 8003674:	9307      	strlt	r3, [sp, #28]
 8003676:	bfb8      	it	lt
 8003678:	9204      	strlt	r2, [sp, #16]
 800367a:	7823      	ldrb	r3, [r4, #0]
 800367c:	2b2e      	cmp	r3, #46	; 0x2e
 800367e:	d10c      	bne.n	800369a <_vfiprintf_r+0x176>
 8003680:	7863      	ldrb	r3, [r4, #1]
 8003682:	2b2a      	cmp	r3, #42	; 0x2a
 8003684:	d135      	bne.n	80036f2 <_vfiprintf_r+0x1ce>
 8003686:	9b03      	ldr	r3, [sp, #12]
 8003688:	1d1a      	adds	r2, r3, #4
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	9203      	str	r2, [sp, #12]
 800368e:	2b00      	cmp	r3, #0
 8003690:	bfb8      	it	lt
 8003692:	f04f 33ff 	movlt.w	r3, #4294967295
 8003696:	3402      	adds	r4, #2
 8003698:	9305      	str	r3, [sp, #20]
 800369a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003780 <_vfiprintf_r+0x25c>
 800369e:	7821      	ldrb	r1, [r4, #0]
 80036a0:	2203      	movs	r2, #3
 80036a2:	4650      	mov	r0, sl
 80036a4:	f7fc fd9c 	bl	80001e0 <memchr>
 80036a8:	b140      	cbz	r0, 80036bc <_vfiprintf_r+0x198>
 80036aa:	2340      	movs	r3, #64	; 0x40
 80036ac:	eba0 000a 	sub.w	r0, r0, sl
 80036b0:	fa03 f000 	lsl.w	r0, r3, r0
 80036b4:	9b04      	ldr	r3, [sp, #16]
 80036b6:	4303      	orrs	r3, r0
 80036b8:	3401      	adds	r4, #1
 80036ba:	9304      	str	r3, [sp, #16]
 80036bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036c0:	482c      	ldr	r0, [pc, #176]	; (8003774 <_vfiprintf_r+0x250>)
 80036c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80036c6:	2206      	movs	r2, #6
 80036c8:	f7fc fd8a 	bl	80001e0 <memchr>
 80036cc:	2800      	cmp	r0, #0
 80036ce:	d03f      	beq.n	8003750 <_vfiprintf_r+0x22c>
 80036d0:	4b29      	ldr	r3, [pc, #164]	; (8003778 <_vfiprintf_r+0x254>)
 80036d2:	bb1b      	cbnz	r3, 800371c <_vfiprintf_r+0x1f8>
 80036d4:	9b03      	ldr	r3, [sp, #12]
 80036d6:	3307      	adds	r3, #7
 80036d8:	f023 0307 	bic.w	r3, r3, #7
 80036dc:	3308      	adds	r3, #8
 80036de:	9303      	str	r3, [sp, #12]
 80036e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036e2:	443b      	add	r3, r7
 80036e4:	9309      	str	r3, [sp, #36]	; 0x24
 80036e6:	e767      	b.n	80035b8 <_vfiprintf_r+0x94>
 80036e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80036ec:	460c      	mov	r4, r1
 80036ee:	2001      	movs	r0, #1
 80036f0:	e7a5      	b.n	800363e <_vfiprintf_r+0x11a>
 80036f2:	2300      	movs	r3, #0
 80036f4:	3401      	adds	r4, #1
 80036f6:	9305      	str	r3, [sp, #20]
 80036f8:	4619      	mov	r1, r3
 80036fa:	f04f 0c0a 	mov.w	ip, #10
 80036fe:	4620      	mov	r0, r4
 8003700:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003704:	3a30      	subs	r2, #48	; 0x30
 8003706:	2a09      	cmp	r2, #9
 8003708:	d903      	bls.n	8003712 <_vfiprintf_r+0x1ee>
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0c5      	beq.n	800369a <_vfiprintf_r+0x176>
 800370e:	9105      	str	r1, [sp, #20]
 8003710:	e7c3      	b.n	800369a <_vfiprintf_r+0x176>
 8003712:	fb0c 2101 	mla	r1, ip, r1, r2
 8003716:	4604      	mov	r4, r0
 8003718:	2301      	movs	r3, #1
 800371a:	e7f0      	b.n	80036fe <_vfiprintf_r+0x1da>
 800371c:	ab03      	add	r3, sp, #12
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	462a      	mov	r2, r5
 8003722:	4b16      	ldr	r3, [pc, #88]	; (800377c <_vfiprintf_r+0x258>)
 8003724:	a904      	add	r1, sp, #16
 8003726:	4630      	mov	r0, r6
 8003728:	f3af 8000 	nop.w
 800372c:	4607      	mov	r7, r0
 800372e:	1c78      	adds	r0, r7, #1
 8003730:	d1d6      	bne.n	80036e0 <_vfiprintf_r+0x1bc>
 8003732:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003734:	07d9      	lsls	r1, r3, #31
 8003736:	d405      	bmi.n	8003744 <_vfiprintf_r+0x220>
 8003738:	89ab      	ldrh	r3, [r5, #12]
 800373a:	059a      	lsls	r2, r3, #22
 800373c:	d402      	bmi.n	8003744 <_vfiprintf_r+0x220>
 800373e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003740:	f7ff fd7f 	bl	8003242 <__retarget_lock_release_recursive>
 8003744:	89ab      	ldrh	r3, [r5, #12]
 8003746:	065b      	lsls	r3, r3, #25
 8003748:	f53f af12 	bmi.w	8003570 <_vfiprintf_r+0x4c>
 800374c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800374e:	e711      	b.n	8003574 <_vfiprintf_r+0x50>
 8003750:	ab03      	add	r3, sp, #12
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	462a      	mov	r2, r5
 8003756:	4b09      	ldr	r3, [pc, #36]	; (800377c <_vfiprintf_r+0x258>)
 8003758:	a904      	add	r1, sp, #16
 800375a:	4630      	mov	r0, r6
 800375c:	f000 f880 	bl	8003860 <_printf_i>
 8003760:	e7e4      	b.n	800372c <_vfiprintf_r+0x208>
 8003762:	bf00      	nop
 8003764:	08003da0 	.word	0x08003da0
 8003768:	08003dc0 	.word	0x08003dc0
 800376c:	08003d80 	.word	0x08003d80
 8003770:	08003de0 	.word	0x08003de0
 8003774:	08003dea 	.word	0x08003dea
 8003778:	00000000 	.word	0x00000000
 800377c:	080034ff 	.word	0x080034ff
 8003780:	08003de6 	.word	0x08003de6

08003784 <_printf_common>:
 8003784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003788:	4616      	mov	r6, r2
 800378a:	4699      	mov	r9, r3
 800378c:	688a      	ldr	r2, [r1, #8]
 800378e:	690b      	ldr	r3, [r1, #16]
 8003790:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003794:	4293      	cmp	r3, r2
 8003796:	bfb8      	it	lt
 8003798:	4613      	movlt	r3, r2
 800379a:	6033      	str	r3, [r6, #0]
 800379c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037a0:	4607      	mov	r7, r0
 80037a2:	460c      	mov	r4, r1
 80037a4:	b10a      	cbz	r2, 80037aa <_printf_common+0x26>
 80037a6:	3301      	adds	r3, #1
 80037a8:	6033      	str	r3, [r6, #0]
 80037aa:	6823      	ldr	r3, [r4, #0]
 80037ac:	0699      	lsls	r1, r3, #26
 80037ae:	bf42      	ittt	mi
 80037b0:	6833      	ldrmi	r3, [r6, #0]
 80037b2:	3302      	addmi	r3, #2
 80037b4:	6033      	strmi	r3, [r6, #0]
 80037b6:	6825      	ldr	r5, [r4, #0]
 80037b8:	f015 0506 	ands.w	r5, r5, #6
 80037bc:	d106      	bne.n	80037cc <_printf_common+0x48>
 80037be:	f104 0a19 	add.w	sl, r4, #25
 80037c2:	68e3      	ldr	r3, [r4, #12]
 80037c4:	6832      	ldr	r2, [r6, #0]
 80037c6:	1a9b      	subs	r3, r3, r2
 80037c8:	42ab      	cmp	r3, r5
 80037ca:	dc26      	bgt.n	800381a <_printf_common+0x96>
 80037cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80037d0:	1e13      	subs	r3, r2, #0
 80037d2:	6822      	ldr	r2, [r4, #0]
 80037d4:	bf18      	it	ne
 80037d6:	2301      	movne	r3, #1
 80037d8:	0692      	lsls	r2, r2, #26
 80037da:	d42b      	bmi.n	8003834 <_printf_common+0xb0>
 80037dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037e0:	4649      	mov	r1, r9
 80037e2:	4638      	mov	r0, r7
 80037e4:	47c0      	blx	r8
 80037e6:	3001      	adds	r0, #1
 80037e8:	d01e      	beq.n	8003828 <_printf_common+0xa4>
 80037ea:	6823      	ldr	r3, [r4, #0]
 80037ec:	68e5      	ldr	r5, [r4, #12]
 80037ee:	6832      	ldr	r2, [r6, #0]
 80037f0:	f003 0306 	and.w	r3, r3, #6
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	bf08      	it	eq
 80037f8:	1aad      	subeq	r5, r5, r2
 80037fa:	68a3      	ldr	r3, [r4, #8]
 80037fc:	6922      	ldr	r2, [r4, #16]
 80037fe:	bf0c      	ite	eq
 8003800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003804:	2500      	movne	r5, #0
 8003806:	4293      	cmp	r3, r2
 8003808:	bfc4      	itt	gt
 800380a:	1a9b      	subgt	r3, r3, r2
 800380c:	18ed      	addgt	r5, r5, r3
 800380e:	2600      	movs	r6, #0
 8003810:	341a      	adds	r4, #26
 8003812:	42b5      	cmp	r5, r6
 8003814:	d11a      	bne.n	800384c <_printf_common+0xc8>
 8003816:	2000      	movs	r0, #0
 8003818:	e008      	b.n	800382c <_printf_common+0xa8>
 800381a:	2301      	movs	r3, #1
 800381c:	4652      	mov	r2, sl
 800381e:	4649      	mov	r1, r9
 8003820:	4638      	mov	r0, r7
 8003822:	47c0      	blx	r8
 8003824:	3001      	adds	r0, #1
 8003826:	d103      	bne.n	8003830 <_printf_common+0xac>
 8003828:	f04f 30ff 	mov.w	r0, #4294967295
 800382c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003830:	3501      	adds	r5, #1
 8003832:	e7c6      	b.n	80037c2 <_printf_common+0x3e>
 8003834:	18e1      	adds	r1, r4, r3
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	2030      	movs	r0, #48	; 0x30
 800383a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800383e:	4422      	add	r2, r4
 8003840:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003844:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003848:	3302      	adds	r3, #2
 800384a:	e7c7      	b.n	80037dc <_printf_common+0x58>
 800384c:	2301      	movs	r3, #1
 800384e:	4622      	mov	r2, r4
 8003850:	4649      	mov	r1, r9
 8003852:	4638      	mov	r0, r7
 8003854:	47c0      	blx	r8
 8003856:	3001      	adds	r0, #1
 8003858:	d0e6      	beq.n	8003828 <_printf_common+0xa4>
 800385a:	3601      	adds	r6, #1
 800385c:	e7d9      	b.n	8003812 <_printf_common+0x8e>
	...

08003860 <_printf_i>:
 8003860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003864:	7e0f      	ldrb	r7, [r1, #24]
 8003866:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003868:	2f78      	cmp	r7, #120	; 0x78
 800386a:	4691      	mov	r9, r2
 800386c:	4680      	mov	r8, r0
 800386e:	460c      	mov	r4, r1
 8003870:	469a      	mov	sl, r3
 8003872:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003876:	d807      	bhi.n	8003888 <_printf_i+0x28>
 8003878:	2f62      	cmp	r7, #98	; 0x62
 800387a:	d80a      	bhi.n	8003892 <_printf_i+0x32>
 800387c:	2f00      	cmp	r7, #0
 800387e:	f000 80d8 	beq.w	8003a32 <_printf_i+0x1d2>
 8003882:	2f58      	cmp	r7, #88	; 0x58
 8003884:	f000 80a3 	beq.w	80039ce <_printf_i+0x16e>
 8003888:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800388c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003890:	e03a      	b.n	8003908 <_printf_i+0xa8>
 8003892:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003896:	2b15      	cmp	r3, #21
 8003898:	d8f6      	bhi.n	8003888 <_printf_i+0x28>
 800389a:	a101      	add	r1, pc, #4	; (adr r1, 80038a0 <_printf_i+0x40>)
 800389c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80038a0:	080038f9 	.word	0x080038f9
 80038a4:	0800390d 	.word	0x0800390d
 80038a8:	08003889 	.word	0x08003889
 80038ac:	08003889 	.word	0x08003889
 80038b0:	08003889 	.word	0x08003889
 80038b4:	08003889 	.word	0x08003889
 80038b8:	0800390d 	.word	0x0800390d
 80038bc:	08003889 	.word	0x08003889
 80038c0:	08003889 	.word	0x08003889
 80038c4:	08003889 	.word	0x08003889
 80038c8:	08003889 	.word	0x08003889
 80038cc:	08003a19 	.word	0x08003a19
 80038d0:	0800393d 	.word	0x0800393d
 80038d4:	080039fb 	.word	0x080039fb
 80038d8:	08003889 	.word	0x08003889
 80038dc:	08003889 	.word	0x08003889
 80038e0:	08003a3b 	.word	0x08003a3b
 80038e4:	08003889 	.word	0x08003889
 80038e8:	0800393d 	.word	0x0800393d
 80038ec:	08003889 	.word	0x08003889
 80038f0:	08003889 	.word	0x08003889
 80038f4:	08003a03 	.word	0x08003a03
 80038f8:	682b      	ldr	r3, [r5, #0]
 80038fa:	1d1a      	adds	r2, r3, #4
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	602a      	str	r2, [r5, #0]
 8003900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003904:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003908:	2301      	movs	r3, #1
 800390a:	e0a3      	b.n	8003a54 <_printf_i+0x1f4>
 800390c:	6820      	ldr	r0, [r4, #0]
 800390e:	6829      	ldr	r1, [r5, #0]
 8003910:	0606      	lsls	r6, r0, #24
 8003912:	f101 0304 	add.w	r3, r1, #4
 8003916:	d50a      	bpl.n	800392e <_printf_i+0xce>
 8003918:	680e      	ldr	r6, [r1, #0]
 800391a:	602b      	str	r3, [r5, #0]
 800391c:	2e00      	cmp	r6, #0
 800391e:	da03      	bge.n	8003928 <_printf_i+0xc8>
 8003920:	232d      	movs	r3, #45	; 0x2d
 8003922:	4276      	negs	r6, r6
 8003924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003928:	485e      	ldr	r0, [pc, #376]	; (8003aa4 <_printf_i+0x244>)
 800392a:	230a      	movs	r3, #10
 800392c:	e019      	b.n	8003962 <_printf_i+0x102>
 800392e:	680e      	ldr	r6, [r1, #0]
 8003930:	602b      	str	r3, [r5, #0]
 8003932:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003936:	bf18      	it	ne
 8003938:	b236      	sxthne	r6, r6
 800393a:	e7ef      	b.n	800391c <_printf_i+0xbc>
 800393c:	682b      	ldr	r3, [r5, #0]
 800393e:	6820      	ldr	r0, [r4, #0]
 8003940:	1d19      	adds	r1, r3, #4
 8003942:	6029      	str	r1, [r5, #0]
 8003944:	0601      	lsls	r1, r0, #24
 8003946:	d501      	bpl.n	800394c <_printf_i+0xec>
 8003948:	681e      	ldr	r6, [r3, #0]
 800394a:	e002      	b.n	8003952 <_printf_i+0xf2>
 800394c:	0646      	lsls	r6, r0, #25
 800394e:	d5fb      	bpl.n	8003948 <_printf_i+0xe8>
 8003950:	881e      	ldrh	r6, [r3, #0]
 8003952:	4854      	ldr	r0, [pc, #336]	; (8003aa4 <_printf_i+0x244>)
 8003954:	2f6f      	cmp	r7, #111	; 0x6f
 8003956:	bf0c      	ite	eq
 8003958:	2308      	moveq	r3, #8
 800395a:	230a      	movne	r3, #10
 800395c:	2100      	movs	r1, #0
 800395e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003962:	6865      	ldr	r5, [r4, #4]
 8003964:	60a5      	str	r5, [r4, #8]
 8003966:	2d00      	cmp	r5, #0
 8003968:	bfa2      	ittt	ge
 800396a:	6821      	ldrge	r1, [r4, #0]
 800396c:	f021 0104 	bicge.w	r1, r1, #4
 8003970:	6021      	strge	r1, [r4, #0]
 8003972:	b90e      	cbnz	r6, 8003978 <_printf_i+0x118>
 8003974:	2d00      	cmp	r5, #0
 8003976:	d04d      	beq.n	8003a14 <_printf_i+0x1b4>
 8003978:	4615      	mov	r5, r2
 800397a:	fbb6 f1f3 	udiv	r1, r6, r3
 800397e:	fb03 6711 	mls	r7, r3, r1, r6
 8003982:	5dc7      	ldrb	r7, [r0, r7]
 8003984:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003988:	4637      	mov	r7, r6
 800398a:	42bb      	cmp	r3, r7
 800398c:	460e      	mov	r6, r1
 800398e:	d9f4      	bls.n	800397a <_printf_i+0x11a>
 8003990:	2b08      	cmp	r3, #8
 8003992:	d10b      	bne.n	80039ac <_printf_i+0x14c>
 8003994:	6823      	ldr	r3, [r4, #0]
 8003996:	07de      	lsls	r6, r3, #31
 8003998:	d508      	bpl.n	80039ac <_printf_i+0x14c>
 800399a:	6923      	ldr	r3, [r4, #16]
 800399c:	6861      	ldr	r1, [r4, #4]
 800399e:	4299      	cmp	r1, r3
 80039a0:	bfde      	ittt	le
 80039a2:	2330      	movle	r3, #48	; 0x30
 80039a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039ac:	1b52      	subs	r2, r2, r5
 80039ae:	6122      	str	r2, [r4, #16]
 80039b0:	f8cd a000 	str.w	sl, [sp]
 80039b4:	464b      	mov	r3, r9
 80039b6:	aa03      	add	r2, sp, #12
 80039b8:	4621      	mov	r1, r4
 80039ba:	4640      	mov	r0, r8
 80039bc:	f7ff fee2 	bl	8003784 <_printf_common>
 80039c0:	3001      	adds	r0, #1
 80039c2:	d14c      	bne.n	8003a5e <_printf_i+0x1fe>
 80039c4:	f04f 30ff 	mov.w	r0, #4294967295
 80039c8:	b004      	add	sp, #16
 80039ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ce:	4835      	ldr	r0, [pc, #212]	; (8003aa4 <_printf_i+0x244>)
 80039d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80039d4:	6829      	ldr	r1, [r5, #0]
 80039d6:	6823      	ldr	r3, [r4, #0]
 80039d8:	f851 6b04 	ldr.w	r6, [r1], #4
 80039dc:	6029      	str	r1, [r5, #0]
 80039de:	061d      	lsls	r5, r3, #24
 80039e0:	d514      	bpl.n	8003a0c <_printf_i+0x1ac>
 80039e2:	07df      	lsls	r7, r3, #31
 80039e4:	bf44      	itt	mi
 80039e6:	f043 0320 	orrmi.w	r3, r3, #32
 80039ea:	6023      	strmi	r3, [r4, #0]
 80039ec:	b91e      	cbnz	r6, 80039f6 <_printf_i+0x196>
 80039ee:	6823      	ldr	r3, [r4, #0]
 80039f0:	f023 0320 	bic.w	r3, r3, #32
 80039f4:	6023      	str	r3, [r4, #0]
 80039f6:	2310      	movs	r3, #16
 80039f8:	e7b0      	b.n	800395c <_printf_i+0xfc>
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	f043 0320 	orr.w	r3, r3, #32
 8003a00:	6023      	str	r3, [r4, #0]
 8003a02:	2378      	movs	r3, #120	; 0x78
 8003a04:	4828      	ldr	r0, [pc, #160]	; (8003aa8 <_printf_i+0x248>)
 8003a06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a0a:	e7e3      	b.n	80039d4 <_printf_i+0x174>
 8003a0c:	0659      	lsls	r1, r3, #25
 8003a0e:	bf48      	it	mi
 8003a10:	b2b6      	uxthmi	r6, r6
 8003a12:	e7e6      	b.n	80039e2 <_printf_i+0x182>
 8003a14:	4615      	mov	r5, r2
 8003a16:	e7bb      	b.n	8003990 <_printf_i+0x130>
 8003a18:	682b      	ldr	r3, [r5, #0]
 8003a1a:	6826      	ldr	r6, [r4, #0]
 8003a1c:	6961      	ldr	r1, [r4, #20]
 8003a1e:	1d18      	adds	r0, r3, #4
 8003a20:	6028      	str	r0, [r5, #0]
 8003a22:	0635      	lsls	r5, r6, #24
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	d501      	bpl.n	8003a2c <_printf_i+0x1cc>
 8003a28:	6019      	str	r1, [r3, #0]
 8003a2a:	e002      	b.n	8003a32 <_printf_i+0x1d2>
 8003a2c:	0670      	lsls	r0, r6, #25
 8003a2e:	d5fb      	bpl.n	8003a28 <_printf_i+0x1c8>
 8003a30:	8019      	strh	r1, [r3, #0]
 8003a32:	2300      	movs	r3, #0
 8003a34:	6123      	str	r3, [r4, #16]
 8003a36:	4615      	mov	r5, r2
 8003a38:	e7ba      	b.n	80039b0 <_printf_i+0x150>
 8003a3a:	682b      	ldr	r3, [r5, #0]
 8003a3c:	1d1a      	adds	r2, r3, #4
 8003a3e:	602a      	str	r2, [r5, #0]
 8003a40:	681d      	ldr	r5, [r3, #0]
 8003a42:	6862      	ldr	r2, [r4, #4]
 8003a44:	2100      	movs	r1, #0
 8003a46:	4628      	mov	r0, r5
 8003a48:	f7fc fbca 	bl	80001e0 <memchr>
 8003a4c:	b108      	cbz	r0, 8003a52 <_printf_i+0x1f2>
 8003a4e:	1b40      	subs	r0, r0, r5
 8003a50:	6060      	str	r0, [r4, #4]
 8003a52:	6863      	ldr	r3, [r4, #4]
 8003a54:	6123      	str	r3, [r4, #16]
 8003a56:	2300      	movs	r3, #0
 8003a58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a5c:	e7a8      	b.n	80039b0 <_printf_i+0x150>
 8003a5e:	6923      	ldr	r3, [r4, #16]
 8003a60:	462a      	mov	r2, r5
 8003a62:	4649      	mov	r1, r9
 8003a64:	4640      	mov	r0, r8
 8003a66:	47d0      	blx	sl
 8003a68:	3001      	adds	r0, #1
 8003a6a:	d0ab      	beq.n	80039c4 <_printf_i+0x164>
 8003a6c:	6823      	ldr	r3, [r4, #0]
 8003a6e:	079b      	lsls	r3, r3, #30
 8003a70:	d413      	bmi.n	8003a9a <_printf_i+0x23a>
 8003a72:	68e0      	ldr	r0, [r4, #12]
 8003a74:	9b03      	ldr	r3, [sp, #12]
 8003a76:	4298      	cmp	r0, r3
 8003a78:	bfb8      	it	lt
 8003a7a:	4618      	movlt	r0, r3
 8003a7c:	e7a4      	b.n	80039c8 <_printf_i+0x168>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	4632      	mov	r2, r6
 8003a82:	4649      	mov	r1, r9
 8003a84:	4640      	mov	r0, r8
 8003a86:	47d0      	blx	sl
 8003a88:	3001      	adds	r0, #1
 8003a8a:	d09b      	beq.n	80039c4 <_printf_i+0x164>
 8003a8c:	3501      	adds	r5, #1
 8003a8e:	68e3      	ldr	r3, [r4, #12]
 8003a90:	9903      	ldr	r1, [sp, #12]
 8003a92:	1a5b      	subs	r3, r3, r1
 8003a94:	42ab      	cmp	r3, r5
 8003a96:	dcf2      	bgt.n	8003a7e <_printf_i+0x21e>
 8003a98:	e7eb      	b.n	8003a72 <_printf_i+0x212>
 8003a9a:	2500      	movs	r5, #0
 8003a9c:	f104 0619 	add.w	r6, r4, #25
 8003aa0:	e7f5      	b.n	8003a8e <_printf_i+0x22e>
 8003aa2:	bf00      	nop
 8003aa4:	08003df1 	.word	0x08003df1
 8003aa8:	08003e02 	.word	0x08003e02

08003aac <_sbrk_r>:
 8003aac:	b538      	push	{r3, r4, r5, lr}
 8003aae:	4d06      	ldr	r5, [pc, #24]	; (8003ac8 <_sbrk_r+0x1c>)
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	4608      	mov	r0, r1
 8003ab6:	602b      	str	r3, [r5, #0]
 8003ab8:	f7fd f9a8 	bl	8000e0c <_sbrk>
 8003abc:	1c43      	adds	r3, r0, #1
 8003abe:	d102      	bne.n	8003ac6 <_sbrk_r+0x1a>
 8003ac0:	682b      	ldr	r3, [r5, #0]
 8003ac2:	b103      	cbz	r3, 8003ac6 <_sbrk_r+0x1a>
 8003ac4:	6023      	str	r3, [r4, #0]
 8003ac6:	bd38      	pop	{r3, r4, r5, pc}
 8003ac8:	20000118 	.word	0x20000118

08003acc <__sread>:
 8003acc:	b510      	push	{r4, lr}
 8003ace:	460c      	mov	r4, r1
 8003ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ad4:	f000 f8a0 	bl	8003c18 <_read_r>
 8003ad8:	2800      	cmp	r0, #0
 8003ada:	bfab      	itete	ge
 8003adc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003ade:	89a3      	ldrhlt	r3, [r4, #12]
 8003ae0:	181b      	addge	r3, r3, r0
 8003ae2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ae6:	bfac      	ite	ge
 8003ae8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003aea:	81a3      	strhlt	r3, [r4, #12]
 8003aec:	bd10      	pop	{r4, pc}

08003aee <__swrite>:
 8003aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003af2:	461f      	mov	r7, r3
 8003af4:	898b      	ldrh	r3, [r1, #12]
 8003af6:	05db      	lsls	r3, r3, #23
 8003af8:	4605      	mov	r5, r0
 8003afa:	460c      	mov	r4, r1
 8003afc:	4616      	mov	r6, r2
 8003afe:	d505      	bpl.n	8003b0c <__swrite+0x1e>
 8003b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b04:	2302      	movs	r3, #2
 8003b06:	2200      	movs	r2, #0
 8003b08:	f000 f868 	bl	8003bdc <_lseek_r>
 8003b0c:	89a3      	ldrh	r3, [r4, #12]
 8003b0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b16:	81a3      	strh	r3, [r4, #12]
 8003b18:	4632      	mov	r2, r6
 8003b1a:	463b      	mov	r3, r7
 8003b1c:	4628      	mov	r0, r5
 8003b1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b22:	f000 b817 	b.w	8003b54 <_write_r>

08003b26 <__sseek>:
 8003b26:	b510      	push	{r4, lr}
 8003b28:	460c      	mov	r4, r1
 8003b2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b2e:	f000 f855 	bl	8003bdc <_lseek_r>
 8003b32:	1c43      	adds	r3, r0, #1
 8003b34:	89a3      	ldrh	r3, [r4, #12]
 8003b36:	bf15      	itete	ne
 8003b38:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b42:	81a3      	strheq	r3, [r4, #12]
 8003b44:	bf18      	it	ne
 8003b46:	81a3      	strhne	r3, [r4, #12]
 8003b48:	bd10      	pop	{r4, pc}

08003b4a <__sclose>:
 8003b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b4e:	f000 b813 	b.w	8003b78 <_close_r>
	...

08003b54 <_write_r>:
 8003b54:	b538      	push	{r3, r4, r5, lr}
 8003b56:	4d07      	ldr	r5, [pc, #28]	; (8003b74 <_write_r+0x20>)
 8003b58:	4604      	mov	r4, r0
 8003b5a:	4608      	mov	r0, r1
 8003b5c:	4611      	mov	r1, r2
 8003b5e:	2200      	movs	r2, #0
 8003b60:	602a      	str	r2, [r5, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	f7fd f901 	bl	8000d6a <_write>
 8003b68:	1c43      	adds	r3, r0, #1
 8003b6a:	d102      	bne.n	8003b72 <_write_r+0x1e>
 8003b6c:	682b      	ldr	r3, [r5, #0]
 8003b6e:	b103      	cbz	r3, 8003b72 <_write_r+0x1e>
 8003b70:	6023      	str	r3, [r4, #0]
 8003b72:	bd38      	pop	{r3, r4, r5, pc}
 8003b74:	20000118 	.word	0x20000118

08003b78 <_close_r>:
 8003b78:	b538      	push	{r3, r4, r5, lr}
 8003b7a:	4d06      	ldr	r5, [pc, #24]	; (8003b94 <_close_r+0x1c>)
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	4604      	mov	r4, r0
 8003b80:	4608      	mov	r0, r1
 8003b82:	602b      	str	r3, [r5, #0]
 8003b84:	f7fd f90d 	bl	8000da2 <_close>
 8003b88:	1c43      	adds	r3, r0, #1
 8003b8a:	d102      	bne.n	8003b92 <_close_r+0x1a>
 8003b8c:	682b      	ldr	r3, [r5, #0]
 8003b8e:	b103      	cbz	r3, 8003b92 <_close_r+0x1a>
 8003b90:	6023      	str	r3, [r4, #0]
 8003b92:	bd38      	pop	{r3, r4, r5, pc}
 8003b94:	20000118 	.word	0x20000118

08003b98 <_fstat_r>:
 8003b98:	b538      	push	{r3, r4, r5, lr}
 8003b9a:	4d07      	ldr	r5, [pc, #28]	; (8003bb8 <_fstat_r+0x20>)
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	4604      	mov	r4, r0
 8003ba0:	4608      	mov	r0, r1
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	602b      	str	r3, [r5, #0]
 8003ba6:	f7fd f908 	bl	8000dba <_fstat>
 8003baa:	1c43      	adds	r3, r0, #1
 8003bac:	d102      	bne.n	8003bb4 <_fstat_r+0x1c>
 8003bae:	682b      	ldr	r3, [r5, #0]
 8003bb0:	b103      	cbz	r3, 8003bb4 <_fstat_r+0x1c>
 8003bb2:	6023      	str	r3, [r4, #0]
 8003bb4:	bd38      	pop	{r3, r4, r5, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000118 	.word	0x20000118

08003bbc <_isatty_r>:
 8003bbc:	b538      	push	{r3, r4, r5, lr}
 8003bbe:	4d06      	ldr	r5, [pc, #24]	; (8003bd8 <_isatty_r+0x1c>)
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	4604      	mov	r4, r0
 8003bc4:	4608      	mov	r0, r1
 8003bc6:	602b      	str	r3, [r5, #0]
 8003bc8:	f7fd f907 	bl	8000dda <_isatty>
 8003bcc:	1c43      	adds	r3, r0, #1
 8003bce:	d102      	bne.n	8003bd6 <_isatty_r+0x1a>
 8003bd0:	682b      	ldr	r3, [r5, #0]
 8003bd2:	b103      	cbz	r3, 8003bd6 <_isatty_r+0x1a>
 8003bd4:	6023      	str	r3, [r4, #0]
 8003bd6:	bd38      	pop	{r3, r4, r5, pc}
 8003bd8:	20000118 	.word	0x20000118

08003bdc <_lseek_r>:
 8003bdc:	b538      	push	{r3, r4, r5, lr}
 8003bde:	4d07      	ldr	r5, [pc, #28]	; (8003bfc <_lseek_r+0x20>)
 8003be0:	4604      	mov	r4, r0
 8003be2:	4608      	mov	r0, r1
 8003be4:	4611      	mov	r1, r2
 8003be6:	2200      	movs	r2, #0
 8003be8:	602a      	str	r2, [r5, #0]
 8003bea:	461a      	mov	r2, r3
 8003bec:	f7fd f900 	bl	8000df0 <_lseek>
 8003bf0:	1c43      	adds	r3, r0, #1
 8003bf2:	d102      	bne.n	8003bfa <_lseek_r+0x1e>
 8003bf4:	682b      	ldr	r3, [r5, #0]
 8003bf6:	b103      	cbz	r3, 8003bfa <_lseek_r+0x1e>
 8003bf8:	6023      	str	r3, [r4, #0]
 8003bfa:	bd38      	pop	{r3, r4, r5, pc}
 8003bfc:	20000118 	.word	0x20000118

08003c00 <__malloc_lock>:
 8003c00:	4801      	ldr	r0, [pc, #4]	; (8003c08 <__malloc_lock+0x8>)
 8003c02:	f7ff bb1d 	b.w	8003240 <__retarget_lock_acquire_recursive>
 8003c06:	bf00      	nop
 8003c08:	2000010c 	.word	0x2000010c

08003c0c <__malloc_unlock>:
 8003c0c:	4801      	ldr	r0, [pc, #4]	; (8003c14 <__malloc_unlock+0x8>)
 8003c0e:	f7ff bb18 	b.w	8003242 <__retarget_lock_release_recursive>
 8003c12:	bf00      	nop
 8003c14:	2000010c 	.word	0x2000010c

08003c18 <_read_r>:
 8003c18:	b538      	push	{r3, r4, r5, lr}
 8003c1a:	4d07      	ldr	r5, [pc, #28]	; (8003c38 <_read_r+0x20>)
 8003c1c:	4604      	mov	r4, r0
 8003c1e:	4608      	mov	r0, r1
 8003c20:	4611      	mov	r1, r2
 8003c22:	2200      	movs	r2, #0
 8003c24:	602a      	str	r2, [r5, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	f7fd f882 	bl	8000d30 <_read>
 8003c2c:	1c43      	adds	r3, r0, #1
 8003c2e:	d102      	bne.n	8003c36 <_read_r+0x1e>
 8003c30:	682b      	ldr	r3, [r5, #0]
 8003c32:	b103      	cbz	r3, 8003c36 <_read_r+0x1e>
 8003c34:	6023      	str	r3, [r4, #0]
 8003c36:	bd38      	pop	{r3, r4, r5, pc}
 8003c38:	20000118 	.word	0x20000118

08003c3c <_init>:
 8003c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c3e:	bf00      	nop
 8003c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c42:	bc08      	pop	{r3}
 8003c44:	469e      	mov	lr, r3
 8003c46:	4770      	bx	lr

08003c48 <_fini>:
 8003c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4a:	bf00      	nop
 8003c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c4e:	bc08      	pop	{r3}
 8003c50:	469e      	mov	lr, r3
 8003c52:	4770      	bx	lr
